{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __rest } from \"tslib\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { useMergeRefs, useUniqueId, warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport InternalButton from '../button/internal';\nimport { useFormFieldContext } from '../contexts/form-field';\nimport { getBaseProps } from '../internal/base-component/index.js';\nimport ScreenreaderOnly from '../internal/components/screenreader-only';\nimport { useSingleTabStopNavigation } from '../internal/context/single-tab-stop-navigation-context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { joinStrings } from '../internal/utils/strings';\nimport styles from './styles.css.js';\nconst InternalFileInput = React.forwardRef((_a, ref) => {\n  var _b;\n  var {\n      accept,\n      ariaRequired,\n      ariaLabel,\n      multiple = false,\n      value,\n      onChange,\n      variant = 'button',\n      children,\n      __internalRootRef = null,\n      __inputClassName,\n      __inputNativeAttributes,\n      __injectAnalyticsComponentMetadata\n    } = _a,\n    restProps = __rest(_a, [\"accept\", \"ariaRequired\", \"ariaLabel\", \"multiple\", \"value\", \"onChange\", \"variant\", \"children\", \"__internalRootRef\", \"__inputClassName\", \"__inputNativeAttributes\", \"__injectAnalyticsComponentMetadata\"]);\n  const baseProps = getBaseProps(restProps);\n  const uploadInputRef = useRef(null);\n  const containerRef = useRef(null);\n  const mergedRef = useMergeRefs(__internalRootRef, containerRef);\n  const uploadButtonLabelId = useUniqueId('upload-button-label');\n  const formFieldContext = useFormFieldContext(restProps);\n  const selfControlId = useUniqueId('upload-input');\n  const controlId = (_b = formFieldContext.controlId) !== null && _b !== void 0 ? _b : selfControlId;\n  useForwardFocus(ref, uploadInputRef);\n  const [isFocused, setIsFocused] = useState(false);\n  const onUploadButtonClick = () => {\n    var _a;\n    return (_a = uploadInputRef.current) === null || _a === void 0 ? void 0 : _a.click();\n  };\n  const onUploadInputFocus = () => {\n    var _a, _b;\n    setIsFocused(true);\n    (_b = (_a = containerRef.current) === null || _a === void 0 ? void 0 : _a.scrollIntoView) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n  const onUploadInputBlur = () => setIsFocused(false);\n  const onUploadInputChange = ({\n    target\n  }) => {\n    fireNonCancelableEvent(onChange, {\n      value: target.files ? Array.from(target.files) : []\n    });\n  };\n  checkControlled('FileInput', 'value', value, 'onChange', onChange);\n  const nativeAttributes = Object.assign({\n    'aria-label': ariaLabel || children,\n    'aria-labelledby': joinStrings(formFieldContext.ariaLabelledby, uploadButtonLabelId),\n    'aria-describedby': formFieldContext.ariaDescribedby\n  }, __inputNativeAttributes);\n  if (formFieldContext.invalid) {\n    nativeAttributes['aria-invalid'] = true;\n  }\n  if (ariaRequired) {\n    nativeAttributes['aria-required'] = true;\n  }\n  if (variant === 'icon' && !ariaLabel) {\n    warnOnce('FileInput', 'Aria label is required with icon variant.');\n  }\n  // Synchronizing component's value with the native file input state.\n  useEffect(() => {\n    /* istanbul ignore next: The DataTransfer is not available in jsdom. */\n    if (window.DataTransfer) {\n      const dataTransfer = new DataTransfer();\n      for (const file of value) {\n        dataTransfer.items.add(file);\n      }\n      uploadInputRef.current.files = dataTransfer.files;\n    }\n    if (uploadInputRef.current) {\n      uploadInputRef.current.value = ''; // reset value to allow calling onChange when the same file is uploaded again\n    }\n  }, [value]);\n  const {\n    tabIndex\n  } = useSingleTabStopNavigation(uploadInputRef);\n  const analyticsLabel = variant === 'button' && children ? 'button' : 'input';\n  const componentAnalyticsMetadata = {\n    name: 'awsui.FileInput',\n    label: analyticsLabel\n  };\n  const analyticsMetadata = {\n    detail: {\n      label: analyticsLabel\n    }\n  };\n  if (__injectAnalyticsComponentMetadata) {\n    analyticsMetadata.component = componentAnalyticsMetadata;\n  }\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    ref: mergedRef,\n    className: clsx(baseProps.className, styles.root)\n  }, getAnalyticsMetadataAttribute(analyticsMetadata)), React.createElement(\"input\", Object.assign({\n    id: controlId,\n    ref: uploadInputRef,\n    type: \"file\",\n    hidden: false,\n    multiple: multiple,\n    accept: accept,\n    onChange: onUploadInputChange,\n    onFocus: onUploadInputFocus,\n    onBlur: onUploadInputBlur,\n    className: clsx(styles['file-input'], styles.hidden, __inputClassName),\n    tabIndex: tabIndex\n  }, nativeAttributes)), React.createElement(InternalButton, {\n    iconName: \"upload\",\n    variant: variant === 'icon' ? 'icon' : undefined,\n    formAction: \"none\",\n    onClick: onUploadButtonClick,\n    className: clsx(styles['file-input-button'], {\n      [styles['force-focus-outline-button']]: isFocused && variant === 'button',\n      [styles['force-focus-outline-icon']]: isFocused && variant === 'icon'\n    }),\n    __nativeAttributes: {\n      tabIndex: -1,\n      'aria-hidden': true\n    }\n  }, variant === 'button' && children), React.createElement(ScreenreaderOnly, {\n    id: uploadButtonLabelId\n  }, ariaLabel || children));\n});\nexport default InternalFileInput;","map":{"version":3,"names":["React","useEffect","useRef","useState","clsx","useMergeRefs","useUniqueId","warnOnce","getAnalyticsMetadataAttribute","InternalButton","useFormFieldContext","getBaseProps","ScreenreaderOnly","useSingleTabStopNavigation","fireNonCancelableEvent","checkControlled","useForwardFocus","joinStrings","styles","InternalFileInput","forwardRef","_a","ref","accept","ariaRequired","ariaLabel","multiple","value","onChange","variant","children","__internalRootRef","__inputClassName","__inputNativeAttributes","__injectAnalyticsComponentMetadata","restProps","__rest","baseProps","uploadInputRef","containerRef","mergedRef","uploadButtonLabelId","formFieldContext","selfControlId","controlId","_b","isFocused","setIsFocused","onUploadButtonClick","current","click","onUploadInputFocus","scrollIntoView","call","onUploadInputBlur","onUploadInputChange","target","files","Array","from","nativeAttributes","Object","assign","ariaLabelledby","ariaDescribedby","invalid","window","DataTransfer","dataTransfer","file","items","add","tabIndex","analyticsLabel","componentAnalyticsMetadata","name","label","analyticsMetadata","detail","component","createElement","className","root","id","type","hidden","onFocus","onBlur","iconName","undefined","formAction","onClick","__nativeAttributes"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/file-input/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport React, { ChangeEvent, Ref, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\n\nimport { useMergeRefs, useUniqueId, warnOnce } from '@cloudscape-design/component-toolkit/internal';\nimport {\n  GeneratedAnalyticsMetadataFragment,\n  getAnalyticsMetadataAttribute,\n} from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport InternalButton from '../button/internal';\nimport { useFormFieldContext } from '../contexts/form-field';\nimport { getBaseProps } from '../internal/base-component/index.js';\nimport ScreenreaderOnly from '../internal/components/screenreader-only';\nimport { useSingleTabStopNavigation } from '../internal/context/single-tab-stop-navigation-context';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport checkControlled from '../internal/hooks/check-controlled';\nimport useForwardFocus from '../internal/hooks/forward-focus';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component/index.js';\nimport { joinStrings } from '../internal/utils/strings';\nimport { GeneratedAnalyticsMetadataFileInputComponent } from './analytics-metadata/interfaces';\nimport { FileInputProps } from './interfaces';\n\nimport styles from './styles.css.js';\n\ninterface InternalFileInputProps {\n  __inputClassName?: string;\n  __inputNativeAttributes?: React.InputHTMLAttributes<HTMLInputElement> | Record<`data-${string}`, string>;\n  __injectAnalyticsComponentMetadata?: boolean;\n}\n\nconst InternalFileInput = React.forwardRef(\n  (\n    {\n      accept,\n      ariaRequired,\n      ariaLabel,\n      multiple = false,\n      value,\n      onChange,\n      variant = 'button',\n      children,\n      __internalRootRef = null,\n      __inputClassName,\n      __inputNativeAttributes,\n      __injectAnalyticsComponentMetadata,\n      ...restProps\n    }: FileInputProps & InternalBaseComponentProps & InternalFileInputProps,\n    ref: Ref<FileInputProps.Ref>\n  ) => {\n    const baseProps = getBaseProps(restProps);\n    const uploadInputRef = useRef<HTMLInputElement>(null);\n    const containerRef = useRef<HTMLButtonElement>(null);\n    const mergedRef = useMergeRefs(__internalRootRef, containerRef);\n\n    const uploadButtonLabelId = useUniqueId('upload-button-label');\n    const formFieldContext = useFormFieldContext(restProps);\n    const selfControlId = useUniqueId('upload-input');\n    const controlId = formFieldContext.controlId ?? selfControlId;\n\n    useForwardFocus(ref, uploadInputRef);\n\n    const [isFocused, setIsFocused] = useState(false);\n    const onUploadButtonClick = () => uploadInputRef.current?.click();\n    const onUploadInputFocus = () => {\n      setIsFocused(true);\n      containerRef.current?.scrollIntoView?.();\n    };\n    const onUploadInputBlur = () => setIsFocused(false);\n\n    const onUploadInputChange = ({ target }: ChangeEvent<HTMLInputElement>) => {\n      fireNonCancelableEvent(onChange, { value: target.files ? Array.from(target.files) : [] });\n    };\n\n    checkControlled('FileInput', 'value', value, 'onChange', onChange);\n\n    const nativeAttributes: React.HTMLAttributes<HTMLInputElement> = {\n      'aria-label': ariaLabel || children,\n      'aria-labelledby': joinStrings(formFieldContext.ariaLabelledby, uploadButtonLabelId),\n      'aria-describedby': formFieldContext.ariaDescribedby,\n      ...__inputNativeAttributes,\n    };\n    if (formFieldContext.invalid) {\n      nativeAttributes['aria-invalid'] = true;\n    }\n    if (ariaRequired) {\n      nativeAttributes['aria-required'] = true;\n    }\n\n    if (variant === 'icon' && !ariaLabel) {\n      warnOnce('FileInput', 'Aria label is required with icon variant.');\n    }\n\n    // Synchronizing component's value with the native file input state.\n    useEffect(() => {\n      /* istanbul ignore next: The DataTransfer is not available in jsdom. */\n      if (window.DataTransfer) {\n        const dataTransfer = new DataTransfer();\n        for (const file of value) {\n          dataTransfer.items.add(file);\n        }\n        uploadInputRef.current!.files = dataTransfer.files;\n      }\n      if (uploadInputRef.current) {\n        uploadInputRef.current.value = ''; // reset value to allow calling onChange when the same file is uploaded again\n      }\n    }, [value]);\n\n    const { tabIndex } = useSingleTabStopNavigation(uploadInputRef);\n\n    const analyticsLabel = variant === 'button' && children ? 'button' : 'input';\n    const componentAnalyticsMetadata: GeneratedAnalyticsMetadataFileInputComponent = {\n      name: 'awsui.FileInput',\n      label: analyticsLabel,\n    };\n\n    const analyticsMetadata: GeneratedAnalyticsMetadataFragment = { detail: { label: analyticsLabel } };\n    if (__injectAnalyticsComponentMetadata) {\n      analyticsMetadata.component = componentAnalyticsMetadata;\n    }\n\n    return (\n      <div\n        {...baseProps}\n        ref={mergedRef}\n        className={clsx(baseProps.className, styles.root)}\n        {...getAnalyticsMetadataAttribute(analyticsMetadata)}\n      >\n        {/* This is the actual interactive and accessible file-upload element. */}\n        {/* It is visually hidden to achieve the desired UX design. */}\n        <input\n          id={controlId}\n          ref={uploadInputRef}\n          type=\"file\"\n          hidden={false}\n          multiple={multiple}\n          accept={accept}\n          onChange={onUploadInputChange}\n          onFocus={onUploadInputFocus}\n          onBlur={onUploadInputBlur}\n          className={clsx(styles['file-input'], styles.hidden, __inputClassName)}\n          tabIndex={tabIndex}\n          {...nativeAttributes}\n        />\n\n        {/* The button is decorative. It dispatches clicks to the file input and is ARIA-hidden. */}\n        {/* When the input is focused the focus outline is forced on the button. */}\n        <InternalButton\n          iconName=\"upload\"\n          variant={variant === 'icon' ? 'icon' : undefined}\n          formAction=\"none\"\n          onClick={onUploadButtonClick}\n          className={clsx(styles['file-input-button'], {\n            [styles['force-focus-outline-button']]: isFocused && variant === 'button',\n            [styles['force-focus-outline-icon']]: isFocused && variant === 'icon',\n          })}\n          __nativeAttributes={{ tabIndex: -1, 'aria-hidden': true }}\n        >\n          {variant === 'button' && children}\n        </InternalButton>\n\n        {/* The file input needs to be labelled with provided content. Can't use the button because it is ARIA-hidden. */}\n        <ScreenreaderOnly id={uploadButtonLabelId}>{ariaLabel || children}</ScreenreaderOnly>\n      </div>\n    );\n  }\n);\n\nexport default InternalFileInput;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}