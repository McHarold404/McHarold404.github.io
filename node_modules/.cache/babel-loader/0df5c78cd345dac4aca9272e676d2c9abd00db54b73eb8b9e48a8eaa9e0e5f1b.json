{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useMergeRefs } from '@cloudscape-design/component-toolkit/internal';\nimport OptionsList from '../../internal/components/options-list';\nimport { renderOptions } from '../utils/render-options';\nimport scrollToIndex from '../utils/scroll-to-index';\nimport { fallbackItemHeight } from './common';\nimport styles from './styles.css.js';\nconst PlainList = (_ref, ref) => {\n  let {\n    menuProps,\n    getOptionProps,\n    filteredOptions,\n    filteringValue,\n    highlightType,\n    checkboxes,\n    hasDropdownStatus,\n    listBottom,\n    useInteractiveGroups,\n    screenReaderContent,\n    firstOptionSticky\n  } = _ref;\n  const stickyOptionRef = useRef(null);\n  const [stickyOptionBlockSize, setStickyOptionBlockSize] = useState(firstOptionSticky ? fallbackItemHeight : 0);\n  const [width, menuMeasureRef] = useContainerQuery(rect => {\n    if (stickyOptionRef.current) {\n      // Cannot use container query on the sticky option individually because it is not rendered until the dropdown is open.\n      // Not expecting the sticky option to change size without the dropdown also changing size.\n      // The effects of using the sticky option block size to set the menu scroll padding are covered by integration tests.\n      // istanbul ignore next\n      setStickyOptionBlockSize(stickyOptionRef.current.clientHeight);\n    }\n    return {\n      inner: rect.contentBoxWidth,\n      outer: rect.borderBoxWidth\n    };\n  });\n  const menuRef = menuProps.ref;\n  const mergedRef = useMergeRefs(menuMeasureRef, menuRef);\n  useImperativeHandle(ref, () => index => {\n    const isSticky = firstOptionSticky && index === 0;\n    if (highlightType.moveFocus && menuRef.current && !isSticky) {\n      scrollToIndex({\n        index,\n        menuEl: menuRef.current\n      });\n    }\n  }, [firstOptionSticky, highlightType.moveFocus, menuRef]);\n  const withScrollbar = !!width && width.inner < width.outer;\n  return React.createElement(OptionsList, Object.assign({}, menuProps, {\n    ref: mergedRef,\n    stickyItemBlockSize: stickyOptionBlockSize\n  }), renderOptions({\n    options: filteredOptions,\n    getOptionProps,\n    filteringValue,\n    highlightType,\n    checkboxes,\n    hasDropdownStatus,\n    useInteractiveGroups,\n    screenReaderContent,\n    firstOptionSticky,\n    stickyOptionRef,\n    withScrollbar\n  }), listBottom ? React.createElement(\"li\", {\n    role: \"option\",\n    className: styles['list-bottom']\n  }, listBottom) : null);\n};\nexport default forwardRef(PlainList);","map":{"version":3,"names":["React","forwardRef","useImperativeHandle","useRef","useState","useContainerQuery","useMergeRefs","OptionsList","renderOptions","scrollToIndex","fallbackItemHeight","styles","PlainList","_ref","ref","menuProps","getOptionProps","filteredOptions","filteringValue","highlightType","checkboxes","hasDropdownStatus","listBottom","useInteractiveGroups","screenReaderContent","firstOptionSticky","stickyOptionRef","stickyOptionBlockSize","setStickyOptionBlockSize","width","menuMeasureRef","rect","current","clientHeight","inner","contentBoxWidth","outer","borderBoxWidth","menuRef","mergedRef","index","isSticky","moveFocus","menuEl","withScrollbar","createElement","Object","assign","stickyItemBlockSize","options","role","className"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/select/parts/plain-list.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, useImperativeHandle, useRef, useState } from 'react';\n\nimport { useContainerQuery } from '@cloudscape-design/component-toolkit';\nimport { useMergeRefs } from '@cloudscape-design/component-toolkit/internal';\n\nimport { DropdownOption } from '../../internal/components/option/interfaces';\nimport OptionsList from '../../internal/components/options-list';\nimport { HighlightType } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { renderOptions } from '../utils/render-options';\nimport scrollToIndex from '../utils/scroll-to-index';\nimport { GetOptionProps, MenuProps } from '../utils/use-select';\nimport { fallbackItemHeight } from './common';\n\nimport styles from './styles.css.js';\n\nexport interface SelectListProps {\n  menuProps: MenuProps;\n  getOptionProps: GetOptionProps;\n  filteredOptions: ReadonlyArray<DropdownOption>;\n  filteringValue: string;\n  highlightType: HighlightType;\n  checkboxes?: boolean;\n  hasDropdownStatus?: boolean;\n  listBottom?: React.ReactNode;\n  useInteractiveGroups?: boolean;\n  screenReaderContent?: string;\n  firstOptionSticky?: boolean;\n}\n\nexport namespace SelectListProps {\n  export type SelectListRef = (index: number) => void;\n}\n\nconst PlainList = (\n  {\n    menuProps,\n    getOptionProps,\n    filteredOptions,\n    filteringValue,\n    highlightType,\n    checkboxes,\n    hasDropdownStatus,\n    listBottom,\n    useInteractiveGroups,\n    screenReaderContent,\n    firstOptionSticky,\n  }: SelectListProps,\n  ref: React.Ref<SelectListProps.SelectListRef>\n) => {\n  const stickyOptionRef = useRef<HTMLDivElement>(null);\n  const [stickyOptionBlockSize, setStickyOptionBlockSize] = useState(firstOptionSticky ? fallbackItemHeight : 0);\n\n  const [width, menuMeasureRef] = useContainerQuery(rect => {\n    if (stickyOptionRef.current) {\n      // Cannot use container query on the sticky option individually because it is not rendered until the dropdown is open.\n      // Not expecting the sticky option to change size without the dropdown also changing size.\n\n      // The effects of using the sticky option block size to set the menu scroll padding are covered by integration tests.\n      // istanbul ignore next\n      setStickyOptionBlockSize(stickyOptionRef.current.clientHeight);\n    }\n    return { inner: rect.contentBoxWidth, outer: rect.borderBoxWidth };\n  });\n\n  const menuRef = menuProps.ref;\n\n  const mergedRef = useMergeRefs(menuMeasureRef, menuRef);\n\n  useImperativeHandle(\n    ref,\n    () => (index: number) => {\n      const isSticky = firstOptionSticky && index === 0;\n      if (highlightType.moveFocus && menuRef.current && !isSticky) {\n        scrollToIndex({ index, menuEl: menuRef.current });\n      }\n    },\n    [firstOptionSticky, highlightType.moveFocus, menuRef]\n  );\n\n  const withScrollbar = !!width && width.inner < width.outer;\n\n  return (\n    <OptionsList {...menuProps} ref={mergedRef} stickyItemBlockSize={stickyOptionBlockSize}>\n      {renderOptions({\n        options: filteredOptions,\n        getOptionProps,\n        filteringValue,\n        highlightType,\n        checkboxes,\n        hasDropdownStatus,\n        useInteractiveGroups,\n        screenReaderContent,\n        firstOptionSticky,\n        stickyOptionRef,\n        withScrollbar,\n      })}\n      {listBottom ? (\n        <li role=\"option\" className={styles['list-bottom']}>\n          {listBottom}\n        </li>\n      ) : null}\n    </OptionsList>\n  );\n};\n\nexport default forwardRef(PlainList);\n"],"mappings":"AAAA;AACA;AACA,OAAOA,KAAK,IAAIC,UAAU,EAAEC,mBAAmB,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAEhF,SAASC,iBAAiB,QAAQ,sCAAsC;AACxE,SAASC,YAAY,QAAQ,+CAA+C;AAG5E,OAAOC,WAAW,MAAM,wCAAwC;AAEhE,SAASC,aAAa,QAAQ,yBAAyB;AACvD,OAAOC,aAAa,MAAM,0BAA0B;AAEpD,SAASC,kBAAkB,QAAQ,UAAU;AAE7C,OAAOC,MAAM,MAAM,iBAAiB;AAoBpC,MAAMC,SAAS,GAAGA,CAAAC,IAAA,EAchBC,GAA6C,KAC3C;EAAA,IAdF;IACEC,SAAS;IACTC,cAAc;IACdC,eAAe;IACfC,cAAc;IACdC,aAAa;IACbC,UAAU;IACVC,iBAAiB;IACjBC,UAAU;IACVC,oBAAoB;IACpBC,mBAAmB;IACnBC;EAAiB,CACD,GAAAZ,IAAA;EAGlB,MAAMa,eAAe,GAAGvB,MAAM,CAAiB,IAAI,CAAC;EACpD,MAAM,CAACwB,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGxB,QAAQ,CAACqB,iBAAiB,GAAGf,kBAAkB,GAAG,CAAC,CAAC;EAE9G,MAAM,CAACmB,KAAK,EAAEC,cAAc,CAAC,GAAGzB,iBAAiB,CAAC0B,IAAI,IAAG;IACvD,IAAIL,eAAe,CAACM,OAAO,EAAE;MAC3B;MACA;MAEA;MACA;MACAJ,wBAAwB,CAACF,eAAe,CAACM,OAAO,CAACC,YAAY,CAAC;;IAEhE,OAAO;MAAEC,KAAK,EAAEH,IAAI,CAACI,eAAe;MAAEC,KAAK,EAAEL,IAAI,CAACM;IAAc,CAAE;EACpE,CAAC,CAAC;EAEF,MAAMC,OAAO,GAAGvB,SAAS,CAACD,GAAG;EAE7B,MAAMyB,SAAS,GAAGjC,YAAY,CAACwB,cAAc,EAAEQ,OAAO,CAAC;EAEvDpC,mBAAmB,CACjBY,GAAG,EACH,MAAO0B,KAAa,IAAI;IACtB,MAAMC,QAAQ,GAAGhB,iBAAiB,IAAIe,KAAK,KAAK,CAAC;IACjD,IAAIrB,aAAa,CAACuB,SAAS,IAAIJ,OAAO,CAACN,OAAO,IAAI,CAACS,QAAQ,EAAE;MAC3DhC,aAAa,CAAC;QAAE+B,KAAK;QAAEG,MAAM,EAAEL,OAAO,CAACN;MAAO,CAAE,CAAC;;EAErD,CAAC,EACD,CAACP,iBAAiB,EAAEN,aAAa,CAACuB,SAAS,EAAEJ,OAAO,CAAC,CACtD;EAED,MAAMM,aAAa,GAAG,CAAC,CAACf,KAAK,IAAIA,KAAK,CAACK,KAAK,GAAGL,KAAK,CAACO,KAAK;EAE1D,OACEpC,KAAA,CAAA6C,aAAA,CAACtC,WAAW,EAAAuC,MAAA,CAAAC,MAAA,KAAKhC,SAAS;IAAED,GAAG,EAAEyB,SAAS;IAAES,mBAAmB,EAAErB;EAAqB,IACnFnB,aAAa,CAAC;IACbyC,OAAO,EAAEhC,eAAe;IACxBD,cAAc;IACdE,cAAc;IACdC,aAAa;IACbC,UAAU;IACVC,iBAAiB;IACjBE,oBAAoB;IACpBC,mBAAmB;IACnBC,iBAAiB;IACjBC,eAAe;IACfkB;GACD,CAAC,EACDtB,UAAU,GACTtB,KAAA,CAAA6C,aAAA;IAAIK,IAAI,EAAC,QAAQ;IAACC,SAAS,EAAExC,MAAM,CAAC,aAAa;EAAC,GAC/CW,UAAU,CACR,GACH,IAAI,CACI;AAElB,CAAC;AAED,eAAerB,UAAU,CAACW,SAAS,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}