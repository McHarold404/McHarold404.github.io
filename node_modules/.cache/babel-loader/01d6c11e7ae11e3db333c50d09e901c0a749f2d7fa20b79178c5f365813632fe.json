{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, memo, useEffect, useRef } from 'react';\nimport clsx from 'clsx';\nimport { useMergeRefs } from '@cloudscape-design/component-toolkit/internal';\nimport InternalExpandableSection from '../../../expandable-section/internal';\nimport { getBaseProps } from '../../base-component';\nimport ChartSeriesMarker from '../chart-series-marker';\nimport getSeriesDetailsText, { screenReaderTextClass } from './series-details-text';\nimport styles from './styles.css.js';\nexport default memo(forwardRef(ChartSeriesDetails));\nfunction ChartSeriesDetails(_a, ref) {\n  var {\n      details,\n      expandedSeries,\n      setPopoverText,\n      setExpandedState,\n      compactList\n    } = _a,\n    restProps = __rest(_a, [\"details\", \"expandedSeries\", \"setPopoverText\", \"setExpandedState\", \"compactList\"]);\n  const baseProps = getBaseProps(restProps);\n  const className = clsx(baseProps.className, styles.root);\n  const detailsRef = useRef(null);\n  const mergedRef = useMergeRefs(ref, detailsRef);\n  // Once the component has rendered, pass its content in plain text\n  // so that it can be used by screen readers.\n  useEffect(() => {\n    if (setPopoverText) {\n      if (detailsRef.current) {\n        setPopoverText(getSeriesDetailsText(detailsRef.current));\n      }\n      return () => {\n        setPopoverText('');\n      };\n    }\n  }, [details, setPopoverText]);\n  const isExpanded = seriesTitle => !!expandedSeries && expandedSeries.has(seriesTitle);\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    className: className,\n    ref: mergedRef\n  }), React.createElement(\"ul\", {\n    className: clsx(styles.list, compactList && styles.compact)\n  }, details.map((_ref, index) => {\n    let {\n      key,\n      value,\n      markerType,\n      color,\n      isDimmed,\n      subItems,\n      expandableId\n    } = _ref;\n    return React.createElement(\"li\", {\n      key: index,\n      className: clsx({\n        [styles.dimmed]: isDimmed,\n        [styles['list-item']]: true,\n        [styles['with-sub-items']]: subItems === null || subItems === void 0 ? void 0 : subItems.length,\n        [styles.expandable]: !!expandableId\n      })\n    }, (subItems === null || subItems === void 0 ? void 0 : subItems.length) && !!expandableId ? React.createElement(ExpandableSeries, {\n      itemKey: key,\n      value: value,\n      markerType: markerType,\n      color: color,\n      subItems: subItems,\n      expanded: isExpanded(expandableId),\n      setExpandedState: state => setExpandedState && setExpandedState(expandableId, state)\n    }) : React.createElement(NonExpandableSeries, {\n      itemKey: key,\n      value: value,\n      markerType: markerType,\n      color: color,\n      subItems: subItems\n    }));\n  })));\n}\nfunction SubItems(_ref2) {\n  let {\n    items,\n    expandable,\n    expanded\n  } = _ref2;\n  return React.createElement(\"ul\", {\n    className: clsx(styles['sub-items'], expandable && styles.expandable)\n  }, items.map((_ref3, index) => {\n    let {\n      key,\n      value\n    } = _ref3;\n    return React.createElement(\"li\", {\n      key: index,\n      className: clsx(styles['inner-list-item'], styles['key-value-pair'], (expanded || !expandable) && screenReaderTextClass)\n    }, React.createElement(\"span\", {\n      className: styles.key\n    }, key), React.createElement(\"span\", {\n      className: styles.value\n    }, value));\n  }));\n}\nfunction ExpandableSeries(_ref4) {\n  let {\n    itemKey,\n    value,\n    subItems,\n    markerType,\n    color,\n    expanded,\n    setExpandedState\n  } = _ref4;\n  return React.createElement(\"div\", {\n    className: styles['expandable-section']\n  }, markerType && color && React.createElement(ChartSeriesMarker, {\n    type: markerType,\n    color: color\n  }), React.createElement(\"div\", {\n    className: styles['full-width']\n  }, React.createElement(InternalExpandableSection, {\n    variant: \"compact\",\n    headerText: itemKey,\n    headerActions: React.createElement(\"span\", {\n      className: clsx(styles.value, styles.expandable)\n    }, value),\n    expanded: expanded,\n    onChange: _ref5 => {\n      let {\n        detail\n      } = _ref5;\n      return setExpandedState(detail.expanded);\n    }\n  }, React.createElement(SubItems, {\n    items: subItems,\n    expandable: true,\n    expanded: expanded\n  }))));\n}\nfunction NonExpandableSeries(_ref6) {\n  let {\n    itemKey,\n    value,\n    subItems,\n    markerType,\n    color\n  } = _ref6;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: clsx(styles['key-value-pair'], screenReaderTextClass)\n  }, React.createElement(\"div\", {\n    className: styles.key\n  }, markerType && color && React.createElement(ChartSeriesMarker, {\n    type: markerType,\n    color: color\n  }), React.createElement(\"span\", null, itemKey)), React.createElement(\"span\", {\n    className: styles.value\n  }, value)), subItems && React.createElement(SubItems, {\n    items: subItems\n  }));\n}","map":{"version":3,"names":["React","forwardRef","memo","useEffect","useRef","clsx","useMergeRefs","InternalExpandableSection","getBaseProps","ChartSeriesMarker","getSeriesDetailsText","screenReaderTextClass","styles","ChartSeriesDetails","_a","ref","details","expandedSeries","setPopoverText","setExpandedState","compactList","restProps","__rest","baseProps","className","root","detailsRef","mergedRef","current","isExpanded","seriesTitle","has","createElement","Object","assign","list","compact","map","_ref","index","key","value","markerType","color","isDimmed","subItems","expandableId","dimmed","length","expandable","ExpandableSeries","itemKey","expanded","state","NonExpandableSeries","SubItems","_ref2","items","_ref3","_ref4","type","variant","headerText","headerActions","onChange","_ref5","detail","_ref6","Fragment"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/internal/components/chart-series-details/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { forwardRef, memo, ReactNode, useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport { useMergeRefs } from '@cloudscape-design/component-toolkit/internal';\n\nimport InternalExpandableSection from '../../../expandable-section/internal';\nimport { BaseComponentProps, getBaseProps } from '../../base-component';\nimport ChartSeriesMarker, { ChartSeriesMarkerType } from '../chart-series-marker';\nimport getSeriesDetailsText, { screenReaderTextClass } from './series-details-text';\n\nimport styles from './styles.css.js';\n\ninterface ChartDetailPair {\n  key: ReactNode;\n  value: ReactNode;\n}\n\ninterface ListItemProps {\n  itemKey: ReactNode;\n  value: ReactNode;\n  subItems?: ReadonlyArray<ChartDetailPair>;\n  markerType?: ChartSeriesMarkerType;\n  color?: string;\n}\n\nexport interface ChartSeriesDetailItem extends ChartDetailPair {\n  markerType?: ChartSeriesMarkerType;\n  color?: string;\n  isDimmed?: boolean;\n  subItems?: ReadonlyArray<ChartDetailPair>;\n  expandableId?: string;\n}\nexport type ExpandedSeries = Set<string>;\n\ninterface ChartSeriesDetailsProps extends BaseComponentProps {\n  details: ReadonlyArray<ChartSeriesDetailItem>;\n  expandedSeries?: ExpandedSeries;\n  setPopoverText?: (s: string) => void;\n  setExpandedState?: (seriesTitle: string, state: boolean) => void;\n  compactList?: boolean;\n}\n\nexport default memo(forwardRef(ChartSeriesDetails));\n\nfunction ChartSeriesDetails(\n  { details, expandedSeries, setPopoverText, setExpandedState, compactList, ...restProps }: ChartSeriesDetailsProps,\n  ref: React.Ref<HTMLDivElement>\n) {\n  const baseProps = getBaseProps(restProps);\n  const className = clsx(baseProps.className, styles.root);\n  const detailsRef = useRef<HTMLDivElement | null>(null);\n  const mergedRef = useMergeRefs(ref, detailsRef);\n\n  // Once the component has rendered, pass its content in plain text\n  // so that it can be used by screen readers.\n  useEffect(() => {\n    if (setPopoverText) {\n      if (detailsRef.current) {\n        setPopoverText(getSeriesDetailsText(detailsRef.current));\n      }\n      return () => {\n        setPopoverText('');\n      };\n    }\n  }, [details, setPopoverText]);\n\n  const isExpanded = (seriesTitle: string) => !!expandedSeries && expandedSeries.has(seriesTitle);\n\n  return (\n    <div {...baseProps} className={className} ref={mergedRef}>\n      <ul className={clsx(styles.list, compactList && styles.compact)}>\n        {details.map(({ key, value, markerType, color, isDimmed, subItems, expandableId }, index) => (\n          <li\n            key={index}\n            className={clsx({\n              [styles.dimmed]: isDimmed,\n              [styles['list-item']]: true,\n              [styles['with-sub-items']]: subItems?.length,\n              [styles.expandable]: !!expandableId,\n            })}\n          >\n            {subItems?.length && !!expandableId ? (\n              <ExpandableSeries\n                itemKey={key}\n                value={value}\n                markerType={markerType}\n                color={color}\n                subItems={subItems}\n                expanded={isExpanded(expandableId)}\n                setExpandedState={state => setExpandedState && setExpandedState(expandableId, state)}\n              />\n            ) : (\n              <NonExpandableSeries\n                itemKey={key}\n                value={value}\n                markerType={markerType}\n                color={color}\n                subItems={subItems}\n              />\n            )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nfunction SubItems({\n  items,\n  expandable,\n  expanded,\n}: {\n  items: ReadonlyArray<ChartDetailPair>;\n  expandable?: boolean;\n  expanded?: boolean;\n}) {\n  return (\n    <ul className={clsx(styles['sub-items'], expandable && styles.expandable)}>\n      {items.map(({ key, value }, index) => (\n        <li\n          key={index}\n          className={clsx(\n            styles['inner-list-item'],\n            styles['key-value-pair'],\n            (expanded || !expandable) && screenReaderTextClass\n          )}\n        >\n          <span className={styles.key}>{key}</span>\n          <span className={styles.value}>{value}</span>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nfunction ExpandableSeries({\n  itemKey,\n  value,\n  subItems,\n  markerType,\n  color,\n  expanded,\n  setExpandedState,\n}: ListItemProps &\n  Required<Pick<ListItemProps, 'subItems'>> & {\n    expanded: boolean;\n    setExpandedState: (state: boolean) => void;\n  }) {\n  return (\n    <div className={styles['expandable-section']}>\n      {markerType && color && <ChartSeriesMarker type={markerType} color={color} />}\n      <div className={styles['full-width']}>\n        <InternalExpandableSection\n          variant=\"compact\"\n          headerText={itemKey}\n          headerActions={<span className={clsx(styles.value, styles.expandable)}>{value}</span>}\n          expanded={expanded}\n          onChange={({ detail }) => setExpandedState(detail.expanded)}\n        >\n          <SubItems items={subItems} expandable={true} expanded={expanded} />\n        </InternalExpandableSection>\n      </div>\n    </div>\n  );\n}\n\nfunction NonExpandableSeries({ itemKey, value, subItems, markerType, color }: ListItemProps) {\n  return (\n    <>\n      <div className={clsx(styles['key-value-pair'], screenReaderTextClass)}>\n        <div className={styles.key}>\n          {markerType && color && <ChartSeriesMarker type={markerType} color={color} />}\n          <span>{itemKey}</span>\n        </div>\n        <span className={styles.value}>{value}</span>\n      </div>\n      {subItems && <SubItems items={subItems} />}\n    </>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}