{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { joinDateTime, splitDateTime } from '../internal/utils/date-time';\nimport { isIsoDateOnly, isIsoMonthOnly } from '../internal/utils/date-time';\nimport { normalizeTimeString } from '../internal/utils/date-time/join-date-time';\nimport { setTimeOffset, shiftTimeOffset } from './time-offset';\nfunction isAbsoluteValue(value) {\n  return value !== null && (value === null || value === void 0 ? void 0 : value.type) === 'absolute';\n}\nfunction isEmptyAbsoluteValue(value) {\n  return value.type === 'absolute' && value.startDate === '' && value.endDate === '';\n}\nfunction isDateOrMonthOnly(value, checkFn) {\n  return checkFn(value.startDate) && checkFn(value.endDate);\n}\nexport function formatValue(value, _ref) {\n  let {\n    timeOffset,\n    monthOnly,\n    dateOnly\n  } = _ref;\n  if (!isAbsoluteValue(value) || isEmptyAbsoluteValue(value)) {\n    return value;\n  }\n  if (monthOnly || dateOnly) {\n    const [startPart, endPart] = [value.startDate, value.endDate].map(date =>\n    //strip out time or day+time text from dates\n    monthOnly ? date.split('T')[0].split('-').slice(0, 2).join('-') : date.split('T')[0]);\n    return {\n      type: 'absolute',\n      startDate: startPart,\n      endDate: endPart\n    };\n  }\n  return setTimeOffset(value, timeOffset === null ? {\n    startDate: undefined,\n    endDate: undefined\n  } : timeOffset);\n}\nexport function getDefaultMode(value, relativeOptions, rangeSelectorMode) {\n  if (value === null || value === void 0 ? void 0 : value.type) {\n    return value.type;\n  }\n  if (rangeSelectorMode === 'relative-only') {\n    return 'relative';\n  }\n  if (rangeSelectorMode === 'absolute-only') {\n    return 'absolute';\n  }\n  return relativeOptions.length > 0 ? 'relative' : 'absolute';\n}\nexport function splitAbsoluteValue(value) {\n  let hideTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (!value) {\n    return {\n      start: {\n        date: '',\n        time: ''\n      },\n      end: {\n        date: '',\n        time: ''\n      }\n    };\n  }\n  return {\n    start: Object.assign(Object.assign({}, splitDateTime(value.startDate)), hideTime ? {\n      time: ''\n    } : {}),\n    end: Object.assign(Object.assign({}, splitDateTime(value.endDate)), hideTime ? {\n      time: ''\n    } : {})\n  };\n}\nexport function joinAbsoluteValue(value) {\n  let hideTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const [startTime, endTime] = [value.start.time || '00:00:00', value.end.time || '23:59:59'].map(normalizeTimeString);\n  return {\n    type: 'absolute',\n    startDate: hideTime ? value.start.date : joinDateTime(value.start.date, startTime),\n    endDate: hideTime ? value.end.date : joinDateTime(value.end.date, endTime)\n  };\n}\nexport function formatInitialValue(value, dateOnly, monthOnly, normalizedTimeOffset) {\n  if (!isAbsoluteValue(value)) {\n    return shiftTimeOffset(value, normalizedTimeOffset);\n  }\n  if (isEmptyAbsoluteValue(value)) {\n    return value;\n  }\n  if (dateOnly || monthOnly) {\n    return formatValue(value, {\n      dateOnly,\n      monthOnly,\n      timeOffset: normalizedTimeOffset\n    });\n  }\n  if (isDateOrMonthOnly(value, isIsoDateOnly) || isDateOrMonthOnly(value, isIsoMonthOnly)) {\n    return value;\n  }\n  return shiftTimeOffset(value, normalizedTimeOffset);\n}","map":{"version":3,"names":["joinDateTime","splitDateTime","isIsoDateOnly","isIsoMonthOnly","normalizeTimeString","setTimeOffset","shiftTimeOffset","isAbsoluteValue","value","type","isEmptyAbsoluteValue","startDate","endDate","isDateOrMonthOnly","checkFn","formatValue","_ref","timeOffset","monthOnly","dateOnly","startPart","endPart","map","date","split","slice","join","undefined","getDefaultMode","relativeOptions","rangeSelectorMode","length","splitAbsoluteValue","hideTime","arguments","start","time","end","Object","assign","joinAbsoluteValue","startTime","endTime","formatInitialValue","normalizedTimeOffset"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/date-range-picker/utils.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { joinDateTime, splitDateTime } from '../internal/utils/date-time';\nimport { isIsoDateOnly, isIsoMonthOnly } from '../internal/utils/date-time';\nimport { normalizeTimeString } from '../internal/utils/date-time/join-date-time';\nimport { DateRangePickerProps } from './interfaces';\nimport { setTimeOffset, shiftTimeOffset } from './time-offset';\n\ntype NormalizedTimeOffset =\n  | {\n      startDate: number;\n      endDate: number;\n    }\n  | {\n      startDate: undefined;\n      endDate: undefined;\n    };\n\nfunction isAbsoluteValue(value: null | DateRangePickerProps.Value): value is DateRangePickerProps.AbsoluteValue {\n  return value !== null && value?.type === 'absolute';\n}\n\nfunction isEmptyAbsoluteValue(value: DateRangePickerProps.AbsoluteValue): boolean {\n  return value.type === 'absolute' && value.startDate === '' && value.endDate === '';\n}\n\nfunction isDateOrMonthOnly(\n  value: DateRangePickerProps.AbsoluteValue,\n  checkFn: typeof isIsoDateOnly | typeof isIsoMonthOnly\n): boolean {\n  return checkFn(value.startDate) && checkFn(value.endDate);\n}\n\nexport function formatValue(\n  value: null | DateRangePickerProps.Value,\n  {\n    timeOffset,\n    monthOnly,\n    dateOnly,\n  }: {\n    timeOffset: NormalizedTimeOffset | null;\n    monthOnly: boolean;\n    dateOnly: boolean;\n  }\n): null | DateRangePickerProps.Value {\n  if (!isAbsoluteValue(value) || isEmptyAbsoluteValue(value)) {\n    return value;\n  }\n\n  if (monthOnly || dateOnly) {\n    const [startPart, endPart] = [value.startDate, value.endDate].map(date =>\n      //strip out time or day+time text from dates\n      monthOnly ? date.split('T')[0].split('-').slice(0, 2).join('-') : date.split('T')[0]\n    );\n    return { type: 'absolute', startDate: startPart, endDate: endPart };\n  }\n\n  return setTimeOffset(\n    value,\n    timeOffset === null\n      ? {\n          startDate: undefined,\n          endDate: undefined,\n        }\n      : timeOffset\n  );\n}\n\nexport function getDefaultMode(\n  value: null | DateRangePickerProps.Value,\n  relativeOptions: readonly DateRangePickerProps.RelativeOption[],\n  rangeSelectorMode: DateRangePickerProps.RangeSelectorMode\n): 'relative' | 'absolute' {\n  if (value?.type) {\n    return value.type;\n  }\n  if (rangeSelectorMode === 'relative-only') {\n    return 'relative';\n  }\n  if (rangeSelectorMode === 'absolute-only') {\n    return 'absolute';\n  }\n  return relativeOptions.length > 0 ? 'relative' : 'absolute';\n}\n\nexport function splitAbsoluteValue(\n  value: null | DateRangePickerProps.AbsoluteValue,\n  hideTime = false\n): DateRangePickerProps.PendingAbsoluteValue {\n  if (!value) {\n    return { start: { date: '', time: '' }, end: { date: '', time: '' } };\n  }\n\n  return {\n    start: {\n      ...splitDateTime(value.startDate),\n      ...(hideTime ? { time: '' } : {}),\n    },\n    end: {\n      ...splitDateTime(value.endDate),\n      ...(hideTime ? { time: '' } : {}),\n    },\n  };\n}\n\nexport function joinAbsoluteValue(\n  value: DateRangePickerProps.PendingAbsoluteValue,\n  hideTime = false\n): DateRangePickerProps.AbsoluteValue {\n  const [startTime, endTime] = [value.start.time || '00:00:00', value.end.time || '23:59:59'].map(normalizeTimeString);\n  return {\n    type: 'absolute',\n    startDate: hideTime ? value.start.date : joinDateTime(value.start.date, startTime),\n    endDate: hideTime ? value.end.date : joinDateTime(value.end.date, endTime),\n  };\n}\n\nexport function formatInitialValue(\n  value: null | DateRangePickerProps.Value,\n  dateOnly: boolean,\n  monthOnly: boolean,\n  normalizedTimeOffset: NormalizedTimeOffset\n): DateRangePickerProps.Value | null {\n  if (!isAbsoluteValue(value)) {\n    return shiftTimeOffset(value, normalizedTimeOffset);\n  }\n  if (isEmptyAbsoluteValue(value)) {\n    return value;\n  }\n  if (dateOnly || monthOnly) {\n    return formatValue(value, { dateOnly, monthOnly, timeOffset: normalizedTimeOffset });\n  }\n  if (isDateOrMonthOnly(value, isIsoDateOnly) || isDateOrMonthOnly(value, isIsoMonthOnly)) {\n    return value;\n  }\n  return shiftTimeOffset(value, normalizedTimeOffset);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}