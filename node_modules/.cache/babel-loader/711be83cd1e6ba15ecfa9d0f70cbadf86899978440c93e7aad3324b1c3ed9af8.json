{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n'use client';\n\nimport { __rest } from \"tslib\";\nimport React from 'react';\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\nimport { getBaseProps } from '../internal/base-component';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { getExternalProps } from '../internal/utils/external-props';\nimport InternalButtonGroup from './internal';\nconst ButtonGroup = React.forwardRef((_a, ref) => {\n  var {\n      variant,\n      dropdownExpandToViewport = false\n    } = _a,\n    rest = __rest(_a, [\"variant\", \"dropdownExpandToViewport\"]);\n  const baseProps = getBaseProps(rest);\n  const itemCounts = getItemCounts(rest.items);\n  const baseComponentProps = useBaseComponent('ButtonGroup', {\n    props: {\n      variant,\n      dropdownExpandToViewport\n    },\n    metadata: {\n      iconButtonsCount: itemCounts['icon-button'],\n      iconToggleButtonsCount: itemCounts['icon-toggle-button'],\n      iconFileInputsCount: itemCounts['icon-file-input'],\n      menuDropdownsCount: itemCounts['menu-dropdown'],\n      groupsCount: itemCounts.group\n    }\n  });\n  const externalProps = getExternalProps(rest);\n  const componentMetadata = {\n    name: 'awsui.ButtonGroup',\n    label: {\n      root: 'self'\n    }\n  };\n  return React.createElement(InternalButtonGroup, Object.assign({}, baseProps, baseComponentProps, externalProps, {\n    ref: ref,\n    variant: variant,\n    dropdownExpandToViewport: dropdownExpandToViewport\n  }, getAnalyticsMetadataAttribute({\n    component: componentMetadata\n  })));\n});\nfunction getItemCounts(allItems = []) {\n  const counters = {\n    'icon-button': 0,\n    'icon-toggle-button': 0,\n    'icon-file-input': 0,\n    'menu-dropdown': 0,\n    group: 0\n  };\n  function count(items) {\n    for (const item of items) {\n      counters[item.type] += 1;\n      if (item.type === 'group') {\n        count(item.items);\n      }\n    }\n  }\n  count(allItems);\n  return counters;\n}\napplyDisplayName(ButtonGroup, 'ButtonGroup');\nexport default ButtonGroup;","map":{"version":3,"names":["React","getAnalyticsMetadataAttribute","getBaseProps","useBaseComponent","applyDisplayName","getExternalProps","InternalButtonGroup","ButtonGroup","forwardRef","_a","ref","variant","dropdownExpandToViewport","rest","__rest","baseProps","itemCounts","getItemCounts","items","baseComponentProps","props","metadata","iconButtonsCount","iconToggleButtonsCount","iconFileInputsCount","menuDropdownsCount","groupsCount","group","externalProps","componentMetadata","name","label","root","createElement","Object","assign","component","allItems","counters","count","item","type"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/button-group/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n'use client';\nimport React from 'react';\n\nimport { getAnalyticsMetadataAttribute } from '@cloudscape-design/component-toolkit/internal/analytics-metadata';\n\nimport { getBaseProps } from '../internal/base-component';\nimport useBaseComponent from '../internal/hooks/use-base-component';\nimport { applyDisplayName } from '../internal/utils/apply-display-name';\nimport { getExternalProps } from '../internal/utils/external-props';\nimport { GeneratedAnalyticsMetadataButtonGroupComponent } from './analytics-metadata/interfaces';\nimport { ButtonGroupProps } from './interfaces';\nimport InternalButtonGroup from './internal';\n\nexport { ButtonGroupProps };\n\nconst ButtonGroup = React.forwardRef(\n  ({ variant, dropdownExpandToViewport = false, ...rest }: ButtonGroupProps, ref: React.Ref<ButtonGroupProps.Ref>) => {\n    const baseProps = getBaseProps(rest);\n    const itemCounts = getItemCounts(rest.items);\n    const baseComponentProps = useBaseComponent('ButtonGroup', {\n      props: {\n        variant,\n        dropdownExpandToViewport,\n      },\n      metadata: {\n        iconButtonsCount: itemCounts['icon-button'],\n        iconToggleButtonsCount: itemCounts['icon-toggle-button'],\n        iconFileInputsCount: itemCounts['icon-file-input'],\n        menuDropdownsCount: itemCounts['menu-dropdown'],\n        groupsCount: itemCounts.group,\n      },\n    });\n\n    const externalProps = getExternalProps(rest);\n\n    const componentMetadata: GeneratedAnalyticsMetadataButtonGroupComponent = {\n      name: 'awsui.ButtonGroup',\n      label: { root: 'self' },\n    };\n\n    return (\n      <InternalButtonGroup\n        {...baseProps}\n        {...baseComponentProps}\n        {...externalProps}\n        ref={ref}\n        variant={variant}\n        dropdownExpandToViewport={dropdownExpandToViewport}\n        {...getAnalyticsMetadataAttribute({ component: componentMetadata })}\n      />\n    );\n  }\n);\n\nfunction getItemCounts(allItems: readonly ButtonGroupProps.ItemOrGroup[] = []) {\n  const counters = { 'icon-button': 0, 'icon-toggle-button': 0, 'icon-file-input': 0, 'menu-dropdown': 0, group: 0 };\n\n  function count(items: readonly ButtonGroupProps.ItemOrGroup[]) {\n    for (const item of items) {\n      counters[item.type] += 1;\n\n      if (item.type === 'group') {\n        count(item.items);\n      }\n    }\n  }\n  count(allItems);\n\n  return counters;\n}\n\napplyDisplayName(ButtonGroup, 'ButtonGroup');\nexport default ButtonGroup;\n"],"mappings":"AAAA;AACA;AACA,YAAY;;;AACZ,OAAOA,KAAK,MAAM,OAAO;AAEzB,SAASC,6BAA6B,QAAQ,kEAAkE;AAEhH,SAASC,YAAY,QAAQ,4BAA4B;AACzD,OAAOC,gBAAgB,MAAM,sCAAsC;AACnE,SAASC,gBAAgB,QAAQ,sCAAsC;AACvE,SAASC,gBAAgB,QAAQ,kCAAkC;AAGnE,OAAOC,mBAAmB,MAAM,YAAY;AAI5C,MAAMC,WAAW,GAAGP,KAAK,CAACQ,UAAU,CAClC,CAACC,EAAwE,EAAEC,GAAoC,KAAI;MAAlH;MAAEC,OAAO;MAAEC,wBAAwB,GAAG;IAAK,IAAAH,EAA6B;IAAxBI,IAAI,GAAAC,MAAA,CAAAL,EAAA,EAApD,uCAAsD,CAAF;EACnD,MAAMM,SAAS,GAAGb,YAAY,CAACW,IAAI,CAAC;EACpC,MAAMG,UAAU,GAAGC,aAAa,CAACJ,IAAI,CAACK,KAAK,CAAC;EAC5C,MAAMC,kBAAkB,GAAGhB,gBAAgB,CAAC,aAAa,EAAE;IACzDiB,KAAK,EAAE;MACLT,OAAO;MACPC;KACD;IACDS,QAAQ,EAAE;MACRC,gBAAgB,EAAEN,UAAU,CAAC,aAAa,CAAC;MAC3CO,sBAAsB,EAAEP,UAAU,CAAC,oBAAoB,CAAC;MACxDQ,mBAAmB,EAAER,UAAU,CAAC,iBAAiB,CAAC;MAClDS,kBAAkB,EAAET,UAAU,CAAC,eAAe,CAAC;MAC/CU,WAAW,EAAEV,UAAU,CAACW;;GAE3B,CAAC;EAEF,MAAMC,aAAa,GAAGvB,gBAAgB,CAACQ,IAAI,CAAC;EAE5C,MAAMgB,iBAAiB,GAAmD;IACxEC,IAAI,EAAE,mBAAmB;IACzBC,KAAK,EAAE;MAAEC,IAAI,EAAE;IAAM;GACtB;EAED,OACEhC,KAAA,CAAAiC,aAAA,CAAC3B,mBAAmB,EAAA4B,MAAA,CAAAC,MAAA,KACdpB,SAAS,EACTI,kBAAkB,EAClBS,aAAa;IACjBlB,GAAG,EAAEA,GAAG;IACRC,OAAO,EAAEA,OAAO;IAChBC,wBAAwB,EAAEA;EAAwB,GAC9CX,6BAA6B,CAAC;IAAEmC,SAAS,EAAEP;EAAiB,CAAE,CAAC,EACnE;AAEN,CAAC,CACF;AAED,SAASZ,aAAaA,CAACoB,QAAA,GAAoD,EAAE;EAC3E,MAAMC,QAAQ,GAAG;IAAE,aAAa,EAAE,CAAC;IAAE,oBAAoB,EAAE,CAAC;IAAE,iBAAiB,EAAE,CAAC;IAAE,eAAe,EAAE,CAAC;IAAEX,KAAK,EAAE;EAAC,CAAE;EAElH,SAASY,KAAKA,CAACrB,KAA8C;IAC3D,KAAK,MAAMsB,IAAI,IAAItB,KAAK,EAAE;MACxBoB,QAAQ,CAACE,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC;MAExB,IAAID,IAAI,CAACC,IAAI,KAAK,OAAO,EAAE;QACzBF,KAAK,CAACC,IAAI,CAACtB,KAAK,CAAC;;;EAGvB;EACAqB,KAAK,CAACF,QAAQ,CAAC;EAEf,OAAOC,QAAQ;AACjB;AAEAlC,gBAAgB,CAACG,WAAW,EAAE,aAAa,CAAC;AAC5C,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}