{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { isLastDayOfMonth, isSameDay, isSameMonth, isSameYear, isThisMonth, isToday } from 'date-fns';\nimport { useInternalI18n } from '../../../i18n/context';\nimport ScreenreaderOnly from '../../../internal/components/screenreader-only';\nimport { formatDate } from '../../../internal/utils/date-time';\nimport { MonthCalendar, YearCalendar } from '../../../internal/utils/date-time/calendar';\nimport { normalizeStartOfWeek } from '../../../internal/utils/locale/index.js';\nimport { GridCell } from './grid-cell';\nimport { renderDateAnnouncement, renderDayName } from './intl';\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nconst dayUtils = {\n  getItemKey: (rowIndex, rowItemIndex) => `${rowIndex}:${rowItemIndex}`,\n  isSameItem: (date1, date2) => isSameDay(date1, date2),\n  isSamePage: (date1, date2) => isSameMonth(date1, date2),\n  checkIfCurrentDay: date => isToday(date),\n  checkIfCurrentMonth: () => false,\n  checkIfCurrent: date => isToday(date),\n  getPageName: () => 'month'\n};\nconst monthUtils = {\n  getItemKey: (rowIndex, rowItemIndex) => `Month ${rowIndex * 3 + rowItemIndex + 1}`,\n  isSameItem: (date1, date2) => isSameMonth(date1, date2),\n  isSamePage: (date1, date2) => isSameYear(date1, date2),\n  checkIfCurrentDay: () => false,\n  checkIfCurrentMonth: date => isThisMonth(date),\n  checkIfCurrent: date => isThisMonth(date),\n  getPageName: () => 'year'\n};\n/**\n * Calendar grid supports two mechanisms of keyboard navigation:\n * - Native screen-reader table navigation (semantic table markup);\n * - Keyboard arrow-keys navigation (a custom key-down handler).\n *\n * The implementation largely follows the w3 example (https://www.w3.org/WAI/ARIA/apg/example-index/dialog-modal/datepicker-dialog) and shares the following issues:\n * - (table navigation) Chrome+VO - weekday is announced twice when navigating to the calendar's header;\n * - (table navigation) Safari+VO - \"dimmed\" state is announced twice;\n * - (table navigation) Firefox/Chrome+NVDA - cannot use table navigation if any cell has a focus;\n * - (keyboard navigation) Firefox+NVDA - every day is announced as \"not selected\";\n * - (keyboard navigation) Safari/Chrome+VO - weekdays are not announced;\n * - (keyboard navigation) Safari/Chrome+VO - days are not announced as interactive (clickable or selectable);\n * - (keyboard navigation) Safari/Chrome+VO - day announcements are not interruptive and can be missed if navigating fast.\n */\nexport function Grid(_ref) {\n  let {\n    padDates,\n    baseDate,\n    selectedStartDate,\n    selectedEndDate,\n    rangeStartDate,\n    rangeEndDate,\n    focusedDate,\n    focusedDateRef,\n    onSelectDate,\n    onGridKeyDownHandler,\n    onFocusedDateChange,\n    isDateEnabled,\n    dateDisabledReason,\n    locale,\n    todayAriaLabel,\n    currentMonthAriaLabel,\n    ariaLabelledby,\n    className,\n    startOfWeek: rawStartOfWeek = 0,\n    granularity = 'day'\n  } = _ref;\n  const baseDateTime = baseDate === null || baseDate === void 0 ? void 0 : baseDate.getTime();\n  const i18n = useInternalI18n('date-range-picker');\n  const isMonthPicker = granularity === 'month';\n  const startOfWeek = normalizeStartOfWeek(rawStartOfWeek, locale);\n  const calendar = useMemo(() => {\n    const startDate = rangeStartDate !== null && rangeStartDate !== void 0 ? rangeStartDate : rangeEndDate;\n    const endDate = rangeEndDate !== null && rangeEndDate !== void 0 ? rangeEndDate : rangeStartDate;\n    const selection = startDate && endDate ? [startDate, endDate] : null;\n    if (isMonthPicker) {\n      const calendarData = new YearCalendar({\n        baseDate,\n        selection\n      });\n      return {\n        header: [],\n        rows: calendarData.quarters,\n        range: calendarData.range\n      };\n    }\n    const calendarData = new MonthCalendar({\n      padDates,\n      startOfWeek,\n      baseDate,\n      selection\n    });\n    return {\n      header: calendarData.weekdays,\n      rows: calendarData.weeks,\n      range: calendarData.range\n    };\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [padDates, startOfWeek, baseDateTime, rangeStartDate, rangeEndDate]);\n  const currentAnnouncement = i18n(isMonthPicker ? 'i18nStrings.currentMonthAriaLabel' : 'i18nStrings.todayAriaLabel', isMonthPicker ? currentMonthAriaLabel : todayAriaLabel);\n  return React.createElement(\"table\", {\n    role: \"grid\",\n    \"aria-labelledby\": ariaLabelledby,\n    className: clsx(styles.grid, className)\n  }, !isMonthPicker && React.createElement(\"thead\", null, React.createElement(\"tr\", null, calendar.header.map(dayIndex => React.createElement(\"th\", {\n    key: dayIndex,\n    scope: \"col\",\n    className: clsx(styles['grid-cell'], styles['day-header'], testutilStyles['day-header'])\n  }, React.createElement(\"span\", {\n    \"aria-hidden\": \"true\"\n  }, renderDayName(locale, dayIndex, 'short')), React.createElement(ScreenreaderOnly, null, renderDayName(locale, dayIndex, 'long')))))), React.createElement(\"tbody\", {\n    onKeyDown: onGridKeyDownHandler\n  }, calendar.rows.map((row, rowIndex) => {\n    const rowItems = isMonthPicker ? row.months : row.days;\n    const weekTestIndex = !isMonthPicker ? row.testIndex : undefined;\n    return React.createElement(\"tr\", Object.assign({\n      key: rowIndex,\n      className: clsx({\n        [testutilStyles['calendar-quarter']]: isMonthPicker,\n        [testutilStyles['calendar-week']]: !isMonthPicker\n      })\n    }, !isMonthPicker && weekTestIndex ? {\n      ['data-awsui-weekindex']: weekTestIndex\n    } : {}), rowItems.map((_ref2, rowItemIndex) => {\n      let {\n        date,\n        isVisible,\n        isInRange,\n        isSelectionTop,\n        isSelectionBottom,\n        isSelectionLeft,\n        isSelectionRight\n      } = _ref2;\n      const {\n        getItemKey,\n        isSameItem,\n        isSamePage,\n        checkIfCurrent,\n        checkIfCurrentDay,\n        checkIfCurrentMonth,\n        getPageName\n      } = isMonthPicker ? monthUtils : dayUtils;\n      const itemKey = getItemKey(rowIndex, rowItemIndex);\n      const pageName = getPageName();\n      const isCurrentDay = checkIfCurrentDay(date);\n      const isCurrentMonth = checkIfCurrentMonth(date);\n      const isCurrent = checkIfCurrent(date);\n      const isStartDate = !!selectedStartDate && isSameItem(date, selectedStartDate);\n      const isEndDate = !!selectedEndDate && isSameItem(date, selectedEndDate);\n      const isSelected = isStartDate || isEndDate;\n      const isFocused = !!focusedDate && isSameItem(date, focusedDate) && isSamePage(date, baseDate);\n      const onlyOneSelected = !!rangeStartDate && !!rangeEndDate ? isSameItem(rangeStartDate, rangeEndDate) : !selectedStartDate || !selectedEndDate;\n      const isEnabled = (!isDateEnabled || isDateEnabled(date)) && isSamePage(date, baseDate);\n      const disabledReason = dateDisabledReason(date);\n      const isDisabledWithReason = !isEnabled && !!disabledReason;\n      const isFocusable = isFocused && (isEnabled || isDisabledWithReason);\n      const baseClasses = {\n        [testutilStyles['calendar-date']]: !isMonthPicker && isSameMonth(date, baseDate),\n        [testutilStyles['calendar-month']]: isMonthPicker && isSameYear(date, baseDate),\n        [styles.day]: !isMonthPicker,\n        [styles.month]: isMonthPicker,\n        [styles['grid-cell']]: true,\n        [styles['in-first-row']]: rowIndex === 0,\n        [styles['in-first-column']]: rowItemIndex === 0\n      };\n      if (!isVisible) {\n        return React.createElement(\"td\", {\n          key: itemKey,\n          ref: isFocused ? focusedDateRef : undefined,\n          className: clsx(baseClasses, {\n            [styles[`last-day-of-month`]]: !isMonthPicker && isLastDayOfMonth(date),\n            [styles[`last-month-of-year`]]: isMonthPicker && date.getMonth() === 11\n          })\n        });\n      }\n      const handlers = {};\n      if (isEnabled) {\n        handlers.onClick = () => onSelectDate(date);\n        handlers.onFocus = () => onFocusedDateChange(date);\n      }\n      // Screen-reader announcement for the focused day/month.\n      let announcement = renderDateAnnouncement({\n        date,\n        isCurrent,\n        locale,\n        granularity\n      });\n      if (currentAnnouncement) {\n        if (isMonthPicker && isThisMonth(date)) {\n          announcement += `. ${currentAnnouncement}`;\n        } else if (!isMonthPicker && isToday(date)) {\n          announcement += `. ${currentAnnouncement}`;\n        }\n      }\n      // Can't be focused.\n      let tabIndex = undefined;\n      if (isEnabled || isDisabledWithReason) {\n        tabIndex = isFocusable ? 0 // Next focus target.\n        : -1; // Can be focused programmatically.\n      }\n      return React.createElement(GridCell, Object.assign({\n        ref: isFocused ? focusedDateRef : undefined,\n        key: itemKey,\n        className: clsx(baseClasses, {\n          [styles['in-visible-calendar']]: true,\n          [styles[`in-current-${pageName}`]]: isSamePage(date, baseDate),\n          [styles.enabled]: isEnabled,\n          [styles.selected]: isSelected,\n          [styles['start-date']]: isStartDate,\n          [styles['end-date']]: isEndDate,\n          [testutilStyles['start-date']]: isStartDate,\n          [testutilStyles['end-date']]: isEndDate,\n          [styles['no-range']]: isSelected && onlyOneSelected,\n          [styles['in-range']]: isInRange,\n          [styles['in-range-border-block-start']]: isSelectionTop,\n          [styles['in-range-border-block-end']]: isSelectionBottom,\n          [styles['in-range-border-inline-start']]: isSelectionLeft,\n          [styles['in-range-border-inline-end']]: isSelectionRight,\n          [styles.today]: isCurrentDay,\n          [testutilStyles.today]: isCurrentDay,\n          [styles['this-month']]: isCurrentMonth,\n          [testutilStyles['this-month']]: isCurrentMonth\n        }),\n        \"aria-selected\": isEnabled ? isSelected || isInRange : undefined,\n        \"aria-current\": isCurrent ? 'date' : undefined,\n        \"data-date\": formatDate(date, granularity),\n        \"aria-disabled\": !isEnabled,\n        tabIndex: tabIndex,\n        disabledReason: isDisabledWithReason ? disabledReason : undefined\n      }, handlers), React.createElement(\"span\", {\n        className: styles[`${granularity}-inner`],\n        \"aria-hidden\": \"true\"\n      }, isMonthPicker ? date.toLocaleString(locale, {\n        month: 'short'\n      }) : date.getDate()), React.createElement(ScreenreaderOnly, null, announcement));\n    }));\n  })));\n}","map":{"version":3,"names":["React","useMemo","clsx","isLastDayOfMonth","isSameDay","isSameMonth","isSameYear","isThisMonth","isToday","useInternalI18n","ScreenreaderOnly","formatDate","MonthCalendar","YearCalendar","normalizeStartOfWeek","GridCell","renderDateAnnouncement","renderDayName","testutilStyles","styles","dayUtils","getItemKey","rowIndex","rowItemIndex","isSameItem","date1","date2","isSamePage","checkIfCurrentDay","date","checkIfCurrentMonth","checkIfCurrent","getPageName","monthUtils","Grid","_ref","padDates","baseDate","selectedStartDate","selectedEndDate","rangeStartDate","rangeEndDate","focusedDate","focusedDateRef","onSelectDate","onGridKeyDownHandler","onFocusedDateChange","isDateEnabled","dateDisabledReason","locale","todayAriaLabel","currentMonthAriaLabel","ariaLabelledby","className","startOfWeek","rawStartOfWeek","granularity","baseDateTime","getTime","i18n","isMonthPicker","calendar","startDate","endDate","selection","calendarData","header","rows","quarters","range","weekdays","weeks","currentAnnouncement","createElement","role","grid","map","dayIndex","key","scope","onKeyDown","row","rowItems","months","days","weekTestIndex","testIndex","undefined","Object","assign","_ref2","isVisible","isInRange","isSelectionTop","isSelectionBottom","isSelectionLeft","isSelectionRight","itemKey","pageName","isCurrentDay","isCurrentMonth","isCurrent","isStartDate","isEndDate","isSelected","isFocused","onlyOneSelected","isEnabled","disabledReason","isDisabledWithReason","isFocusable","baseClasses","day","month","ref","getMonth","handlers","onClick","onFocus","announcement","tabIndex","enabled","selected","today","toLocaleString","getDate"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/date-range-picker/calendar/grids/grid.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport { isLastDayOfMonth, isSameDay, isSameMonth, isSameYear, isThisMonth, isToday } from 'date-fns';\n\nimport { useInternalI18n } from '../../../i18n/context';\nimport ScreenreaderOnly from '../../../internal/components/screenreader-only';\nimport { formatDate } from '../../../internal/utils/date-time';\nimport { CalendarQuarter, CalendarWeek, MonthCalendar, YearCalendar } from '../../../internal/utils/date-time/calendar';\nimport { normalizeStartOfWeek } from '../../../internal/utils/locale/index.js';\nimport { GridCell } from './grid-cell';\nimport { GridProps } from './interfaces';\nimport { renderDateAnnouncement, renderDayName } from './intl';\n\nimport testutilStyles from '../../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface DatePickerUtils {\n  getItemKey: (rowIndex: number, rowItemIndex: number) => string;\n  isSameItem: (date1: Date, date2: Date) => boolean;\n  isSamePage: (date1: Date, date2: Date) => boolean;\n  checkIfCurrentDay: (date: Date) => boolean;\n  checkIfCurrentMonth: (date: Date) => boolean;\n  checkIfCurrent: (date: Date) => boolean;\n  getPageName: () => string;\n}\n\nconst dayUtils: DatePickerUtils = {\n  getItemKey: (rowIndex, rowItemIndex) => `${rowIndex}:${rowItemIndex}`,\n  isSameItem: (date1: Date, date2: Date) => isSameDay(date1, date2),\n  isSamePage: (date1: Date, date2: Date) => isSameMonth(date1, date2),\n  checkIfCurrentDay: date => isToday(date),\n  checkIfCurrentMonth: () => false,\n  checkIfCurrent: date => isToday(date),\n  getPageName: () => 'month',\n};\n\nconst monthUtils: DatePickerUtils = {\n  getItemKey: (rowIndex, rowItemIndex) => `Month ${rowIndex * 3 + rowItemIndex + 1}`,\n  isSameItem: (date1: Date, date2: Date) => isSameMonth(date1, date2),\n  isSamePage: (date1: Date, date2: Date) => isSameYear(date1, date2),\n  checkIfCurrentDay: () => false,\n  checkIfCurrentMonth: date => isThisMonth(date),\n  checkIfCurrent: date => isThisMonth(date),\n  getPageName: () => 'year',\n};\n\n/**\n * Calendar grid supports two mechanisms of keyboard navigation:\n * - Native screen-reader table navigation (semantic table markup);\n * - Keyboard arrow-keys navigation (a custom key-down handler).\n *\n * The implementation largely follows the w3 example (https://www.w3.org/WAI/ARIA/apg/example-index/dialog-modal/datepicker-dialog) and shares the following issues:\n * - (table navigation) Chrome+VO - weekday is announced twice when navigating to the calendar's header;\n * - (table navigation) Safari+VO - \"dimmed\" state is announced twice;\n * - (table navigation) Firefox/Chrome+NVDA - cannot use table navigation if any cell has a focus;\n * - (keyboard navigation) Firefox+NVDA - every day is announced as \"not selected\";\n * - (keyboard navigation) Safari/Chrome+VO - weekdays are not announced;\n * - (keyboard navigation) Safari/Chrome+VO - days are not announced as interactive (clickable or selectable);\n * - (keyboard navigation) Safari/Chrome+VO - day announcements are not interruptive and can be missed if navigating fast.\n */\n\nexport function Grid({\n  padDates,\n  baseDate,\n  selectedStartDate,\n  selectedEndDate,\n  rangeStartDate,\n  rangeEndDate,\n  focusedDate,\n\n  focusedDateRef,\n\n  onSelectDate,\n  onGridKeyDownHandler,\n  onFocusedDateChange,\n\n  isDateEnabled,\n  dateDisabledReason,\n\n  locale,\n  todayAriaLabel,\n  currentMonthAriaLabel,\n  ariaLabelledby,\n  className,\n  startOfWeek: rawStartOfWeek = 0,\n  granularity = 'day',\n}: GridProps) {\n  const baseDateTime = baseDate?.getTime();\n  const i18n = useInternalI18n('date-range-picker');\n  const isMonthPicker = granularity === 'month';\n  const startOfWeek = normalizeStartOfWeek(rawStartOfWeek, locale);\n  const calendar = useMemo(\n    () => {\n      const startDate = rangeStartDate ?? rangeEndDate;\n      const endDate = rangeEndDate ?? rangeStartDate;\n      const selection = startDate && endDate ? ([startDate, endDate] as [Date, Date]) : null;\n      if (isMonthPicker) {\n        const calendarData = new YearCalendar({ baseDate, selection });\n        return {\n          header: [],\n          rows: calendarData.quarters,\n          range: calendarData.range,\n        };\n      }\n\n      const calendarData = new MonthCalendar({ padDates, startOfWeek, baseDate, selection });\n      return {\n        header: calendarData.weekdays,\n        rows: calendarData.weeks,\n        range: calendarData.range,\n      };\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [padDates, startOfWeek, baseDateTime, rangeStartDate, rangeEndDate]\n  );\n\n  const currentAnnouncement = i18n(\n    isMonthPicker ? 'i18nStrings.currentMonthAriaLabel' : 'i18nStrings.todayAriaLabel',\n    isMonthPicker ? currentMonthAriaLabel : todayAriaLabel\n  );\n\n  return (\n    <table role=\"grid\" aria-labelledby={ariaLabelledby} className={clsx(styles.grid, className)}>\n      {!isMonthPicker && (\n        <thead>\n          <tr>\n            {calendar.header.map(dayIndex => (\n              <th\n                key={dayIndex}\n                scope=\"col\"\n                className={clsx(styles['grid-cell'], styles['day-header'], testutilStyles['day-header'])}\n              >\n                <span aria-hidden=\"true\">{renderDayName(locale, dayIndex, 'short')}</span>\n                <ScreenreaderOnly>{renderDayName(locale, dayIndex, 'long')}</ScreenreaderOnly>\n              </th>\n            ))}\n          </tr>\n        </thead>\n      )}\n      <tbody onKeyDown={onGridKeyDownHandler}>\n        {calendar.rows.map((row, rowIndex) => {\n          const rowItems = isMonthPicker ? (row as CalendarQuarter).months : (row as CalendarWeek).days;\n          const weekTestIndex = !isMonthPicker ? (row as CalendarWeek).testIndex : undefined;\n          return (\n            <tr\n              key={rowIndex}\n              className={clsx({\n                [testutilStyles['calendar-quarter']]: isMonthPicker,\n                [testutilStyles['calendar-week']]: !isMonthPicker,\n              })}\n              {...(!isMonthPicker && weekTestIndex\n                ? {\n                    ['data-awsui-weekindex']: weekTestIndex,\n                  }\n                : {})}\n            >\n              {rowItems.map(\n                (\n                  { date, isVisible, isInRange, isSelectionTop, isSelectionBottom, isSelectionLeft, isSelectionRight },\n                  rowItemIndex\n                ) => {\n                  const {\n                    getItemKey,\n                    isSameItem,\n                    isSamePage,\n                    checkIfCurrent,\n                    checkIfCurrentDay,\n                    checkIfCurrentMonth,\n                    getPageName,\n                  } = isMonthPicker ? monthUtils : dayUtils;\n                  const itemKey = getItemKey(rowIndex, rowItemIndex);\n                  const pageName = getPageName();\n                  const isCurrentDay = checkIfCurrentDay(date);\n                  const isCurrentMonth = checkIfCurrentMonth(date);\n                  const isCurrent = checkIfCurrent(date);\n                  const isStartDate = !!selectedStartDate && isSameItem(date, selectedStartDate);\n                  const isEndDate = !!selectedEndDate && isSameItem(date, selectedEndDate);\n                  const isSelected = isStartDate || isEndDate;\n\n                  const isFocused = !!focusedDate && isSameItem(date, focusedDate) && isSamePage(date, baseDate);\n\n                  const onlyOneSelected =\n                    !!rangeStartDate && !!rangeEndDate\n                      ? isSameItem(rangeStartDate, rangeEndDate)\n                      : !selectedStartDate || !selectedEndDate;\n\n                  const isEnabled = (!isDateEnabled || isDateEnabled(date)) && isSamePage(date, baseDate);\n                  const disabledReason = dateDisabledReason(date);\n\n                  const isDisabledWithReason = !isEnabled && !!disabledReason;\n                  const isFocusable = isFocused && (isEnabled || isDisabledWithReason);\n\n                  const baseClasses = {\n                    [testutilStyles['calendar-date']]: !isMonthPicker && isSameMonth(date, baseDate),\n                    [testutilStyles['calendar-month']]: isMonthPicker && isSameYear(date, baseDate),\n                    [styles.day]: !isMonthPicker,\n                    [styles.month]: isMonthPicker,\n                    [styles['grid-cell']]: true,\n                    [styles['in-first-row']]: rowIndex === 0,\n                    [styles['in-first-column']]: rowItemIndex === 0,\n                  };\n\n                  if (!isVisible) {\n                    return (\n                      <td\n                        key={itemKey}\n                        ref={isFocused ? focusedDateRef : undefined}\n                        className={clsx(baseClasses, {\n                          [styles[`last-day-of-month`]]: !isMonthPicker && isLastDayOfMonth(date),\n                          [styles[`last-month-of-year`]]: isMonthPicker && date.getMonth() === 11,\n                        })}\n                      />\n                    );\n                  }\n\n                  const handlers: React.HTMLAttributes<HTMLDivElement> = {};\n                  if (isEnabled) {\n                    handlers.onClick = () => onSelectDate(date);\n                    handlers.onFocus = () => onFocusedDateChange(date);\n                  }\n\n                  // Screen-reader announcement for the focused day/month.\n                  let announcement = renderDateAnnouncement({\n                    date,\n                    isCurrent,\n                    locale,\n                    granularity,\n                  });\n\n                  if (currentAnnouncement) {\n                    if (isMonthPicker && isThisMonth(date)) {\n                      announcement += `. ${currentAnnouncement}`;\n                    } else if (!isMonthPicker && isToday(date)) {\n                      announcement += `. ${currentAnnouncement}`;\n                    }\n                  }\n\n                  // Can't be focused.\n                  let tabIndex: number | undefined = undefined;\n                  if (isEnabled || isDisabledWithReason) {\n                    tabIndex = isFocusable\n                      ? 0 // Next focus target.\n                      : -1; // Can be focused programmatically.\n                  }\n\n                  return (\n                    <GridCell\n                      ref={isFocused ? focusedDateRef : undefined}\n                      key={itemKey}\n                      className={clsx(baseClasses, {\n                        [styles['in-visible-calendar']]: true,\n                        [styles[`in-current-${pageName}`]]: isSamePage(date, baseDate),\n                        [styles.enabled]: isEnabled,\n                        [styles.selected]: isSelected,\n                        [styles['start-date']]: isStartDate,\n                        [styles['end-date']]: isEndDate,\n                        [testutilStyles['start-date']]: isStartDate,\n                        [testutilStyles['end-date']]: isEndDate,\n                        [styles['no-range']]: isSelected && onlyOneSelected,\n                        [styles['in-range']]: isInRange,\n                        [styles['in-range-border-block-start']]: isSelectionTop,\n                        [styles['in-range-border-block-end']]: isSelectionBottom,\n                        [styles['in-range-border-inline-start']]: isSelectionLeft,\n                        [styles['in-range-border-inline-end']]: isSelectionRight,\n                        [styles.today]: isCurrentDay,\n                        [testutilStyles.today]: isCurrentDay,\n                        [styles['this-month']]: isCurrentMonth,\n                        [testutilStyles['this-month']]: isCurrentMonth,\n                      })}\n                      aria-selected={isEnabled ? isSelected || isInRange : undefined}\n                      aria-current={isCurrent ? 'date' : undefined}\n                      data-date={formatDate(date, granularity)}\n                      aria-disabled={!isEnabled}\n                      tabIndex={tabIndex}\n                      disabledReason={isDisabledWithReason ? disabledReason : undefined}\n                      {...handlers}\n                    >\n                      <span className={styles[`${granularity}-inner`]} aria-hidden=\"true\">\n                        {isMonthPicker ? date.toLocaleString(locale, { month: 'short' }) : date.getDate()}\n                      </span>\n                      <ScreenreaderOnly>{announcement}</ScreenreaderOnly>\n                    </GridCell>\n                  );\n                }\n              )}\n            </tr>\n          );\n        })}\n      </tbody>\n    </table>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}