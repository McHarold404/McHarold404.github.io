{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { useUniqueId } from '@cloudscape-design/component-toolkit/internal';\nimport { isGroup, isGroupInteractive, isInteractive } from '../../internal/components/option/utils/filter-options';\nimport { useHighlightedOption } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { getOptionId } from '../../internal/components/options-list/utils/use-ids';\nimport { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';\nimport { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { connectOptionsByValue } from './connect-options';\nexport function useSelect({\n  selectedOptions,\n  updateSelectedOption,\n  options,\n  filteringType,\n  onBlur,\n  onFocus,\n  externalRef,\n  keepOpen,\n  embedded,\n  fireLoadItems,\n  setFilteringValue,\n  useInteractiveGroups = false,\n  statusType,\n  isAllSelected,\n  isSomeSelected,\n  toggleAll\n}) {\n  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n  const isHighlightable = option => !!option && (useInteractiveGroups || option.type !== 'parent');\n  const filterRef = useRef(null);\n  const triggerRef = useRef(null);\n  const menuRef = useRef(null);\n  const hasFilter = filteringType !== 'none' && !embedded;\n  const activeRef = hasFilter ? filterRef : menuRef;\n  const __selectedOptions = connectOptionsByValue(options, selectedOptions);\n  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet, item) => {\n    if (item.value) {\n      selectedValuesSet.add(item.value);\n    }\n    return selectedValuesSet;\n  }, new Set());\n  const [{\n    highlightType,\n    highlightedOption,\n    highlightedIndex\n  }, {\n    moveHighlightWithKeyboard,\n    resetHighlightWithKeyboard,\n    setHighlightedIndexWithMouse,\n    highlightOptionWithKeyboard,\n    highlightFirstOptionWithMouse,\n    goHomeWithKeyboard,\n    goEndWithKeyboard\n  }] = useHighlightedOption({\n    options: options,\n    isHighlightable\n  });\n  const {\n    isOpen,\n    openDropdown,\n    closeDropdown,\n    toggleDropdown,\n    openedWithKeyboard\n  } = useOpenState({\n    defaultOpen: embedded,\n    onOpen: () => fireLoadItems(''),\n    onClose: () => {\n      resetHighlightWithKeyboard();\n      setFilteringValue === null || setFilteringValue === void 0 ? void 0 : setFilteringValue('');\n    }\n  });\n  const handleFocus = () => {\n    fireNonCancelableEvent(onFocus, {});\n  };\n  const handleBlur = () => {\n    fireNonCancelableEvent(onBlur, {});\n    closeDropdown();\n  };\n  const hasSelectedOption = __selectedOptions.length > 0;\n  const menuId = useUniqueId('option-list');\n  const dialogId = useUniqueId('dialog');\n  const highlightedOptionId = getOptionId(menuId, highlightedIndex);\n  const closeDropdownIfNecessary = () => {\n    var _a;\n    if (!keepOpen) {\n      (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n      closeDropdown();\n    }\n  };\n  const selectOption = option => {\n    const optionToSelect = option || highlightedOption;\n    if (!optionToSelect || !interactivityCheck(optionToSelect)) {\n      return;\n    }\n    if (optionToSelect.type === 'select-all' && toggleAll) {\n      toggleAll();\n    } else {\n      updateSelectedOption(optionToSelect.option);\n    }\n    closeDropdownIfNecessary();\n  };\n  const activeKeyDownHandler = useMenuKeyboard({\n    goUp: () => {\n      if (!useInteractiveGroups && (highlightedOption === null || highlightedOption === void 0 ? void 0 : highlightedOption.type) === 'child' && highlightedIndex === 1 || highlightedIndex === 0) {\n        goEndWithKeyboard();\n        return;\n      }\n      moveHighlightWithKeyboard(-1);\n    },\n    goDown: () => {\n      if (highlightedIndex === options.length - 1) {\n        goHomeWithKeyboard();\n        return;\n      }\n      moveHighlightWithKeyboard(1);\n    },\n    selectOption,\n    goHome: goHomeWithKeyboard,\n    goEnd: goEndWithKeyboard,\n    closeDropdown: () => {\n      var _a;\n      if (!embedded) {\n        (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n        closeDropdown();\n      }\n    },\n    preventNativeSpace: !hasFilter || !!highlightedOption\n  });\n  const triggerKeyDownHandler = useTriggerKeyboard({\n    openDropdown: () => openDropdown(true),\n    goHome: goHomeWithKeyboard\n  });\n  const getDropdownProps = () => ({\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    dropdownContentId: dialogId,\n    dropdownContentRole: hasFilter ? 'dialog' : undefined\n  });\n  const getTriggerProps = (disabled = false, autoFocus = false) => {\n    const triggerProps = {\n      ref: triggerRef,\n      onFocus: () => closeDropdown(),\n      autoFocus,\n      ariaHasPopup: hasFilter ? 'dialog' : 'listbox',\n      ariaControls: isOpen ? hasFilter ? dialogId : menuId : undefined\n    };\n    if (!disabled) {\n      triggerProps.onMouseDown = event => {\n        var _a;\n        event.preventDefault(); // prevent current focus from blurring as it immediately closes the dropdown\n        if (isOpen) {\n          (_a = triggerRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n        }\n        toggleDropdown();\n      };\n      triggerProps.onKeyDown = triggerKeyDownHandler;\n    }\n    return triggerProps;\n  };\n  const getFilterProps = () => {\n    if (!hasFilter || !setFilteringValue) {\n      return {};\n    }\n    return {\n      ref: filterRef,\n      onKeyDown: activeKeyDownHandler,\n      onChange: event => {\n        setFilteringValue(event.detail.value);\n        resetHighlightWithKeyboard();\n      },\n      __onDelayedInput: event => {\n        fireLoadItems(event.detail.value);\n      },\n      __nativeAttributes: {\n        'aria-activedescendant': highlightedOptionId,\n        ['aria-owns']: menuId,\n        ['aria-controls']: menuId\n      }\n    };\n  };\n  const getMenuProps = () => {\n    const menuProps = {\n      id: menuId,\n      ref: menuRef,\n      open: isOpen,\n      onMouseUp: itemIndex => {\n        if (itemIndex > -1) {\n          selectOption(options[itemIndex]);\n        }\n      },\n      onMouseMove: itemIndex => {\n        if (itemIndex > -1) {\n          setHighlightedIndexWithMouse(itemIndex);\n        }\n      },\n      statusType\n    };\n    if (!hasFilter) {\n      menuProps.onKeyDown = activeKeyDownHandler;\n      menuProps.nativeAttributes = {\n        'aria-activedescendant': highlightedOptionId\n      };\n    }\n    if (embedded) {\n      menuProps.onFocus = () => {\n        if (!highlightedOption) {\n          goHomeWithKeyboard();\n        }\n      };\n      menuProps.onBlur = () => {\n        resetHighlightWithKeyboard();\n      };\n    }\n    return menuProps;\n  };\n  const getGroupState = option => {\n    const totalSelected = option.options.filter(item => !!item.value && __selectedValuesSet.has(item.value)).length;\n    const hasSelected = totalSelected > 0;\n    const allSelected = totalSelected === option.options.length;\n    return {\n      selected: hasSelected && allSelected && useInteractiveGroups,\n      indeterminate: hasSelected && !allSelected\n    };\n  };\n  const getOptionProps = (option, index) => {\n    var _a;\n    const isSelectAll = option.type === 'select-all';\n    const highlighted = option === highlightedOption;\n    const groupState = isGroup(option.option) ? getGroupState(option.option) : undefined;\n    const selected = isSelectAll ? isAllSelected : __selectedOptions.indexOf(option) > -1 || !!(groupState === null || groupState === void 0 ? void 0 : groupState.selected);\n    const nextOption = (_a = options[index + 1]) === null || _a === void 0 ? void 0 : _a.option;\n    const isNextSelected = !!nextOption && isGroup(nextOption) ? getGroupState(nextOption).selected : __selectedOptions.indexOf(options[index + 1]) > -1;\n    const optionProps = {\n      key: index,\n      option,\n      highlighted,\n      selected,\n      isNextSelected,\n      indeterminate: !!(groupState === null || groupState === void 0 ? void 0 : groupState.indeterminate) || isSelectAll && !isAllSelected && isSomeSelected,\n      ['data-mouse-target']: isHighlightable(option) ? index : -1,\n      id: getOptionId(menuId, index)\n    };\n    return optionProps;\n  };\n  const prevOpen = usePrevious(isOpen);\n  useEffect(() => {\n    // highlight the first selected option, when opening the Select component without filter input\n    // keep the focus in the filter input when opening, so that screenreader can recognize the combobox\n    if (isOpen && !prevOpen && options.length > 0 && !hasFilter) {\n      if (openedWithKeyboard) {\n        if (__selectedOptions[0]) {\n          highlightOptionWithKeyboard(__selectedOptions[0]);\n        } else {\n          goHomeWithKeyboard();\n        }\n      } else {\n        if (!__selectedOptions[0] || !options.includes(__selectedOptions[0])) {\n          highlightFirstOptionWithMouse();\n        } else {\n          const highlightedIndex = options.indexOf(__selectedOptions[0]);\n          setHighlightedIndexWithMouse(highlightedIndex, true);\n        }\n      }\n    }\n  }, [isOpen, __selectedOptions, hasSelectedOption, setHighlightedIndexWithMouse, highlightOptionWithKeyboard, highlightFirstOptionWithMouse, goHomeWithKeyboard, openedWithKeyboard, options, prevOpen, hasFilter]);\n  useEffect(() => {\n    var _a;\n    if (isOpen && !embedded) {\n      // dropdown-fit calculations ensure that the dropdown will fit inside the current\n      // viewport, so prevent the browser from trying to scroll it into view (e.g. if\n      // scroll-padding-top is set on a parent)\n      (_a = activeRef.current) === null || _a === void 0 ? void 0 : _a.focus({\n        preventScroll: true\n      });\n    }\n  }, [isOpen, activeRef, embedded]);\n  useForwardFocus(externalRef, triggerRef);\n  const highlightedGroupSelected = !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;\n  const announceSelected = !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);\n  return {\n    isOpen,\n    highlightedOption,\n    highlightedIndex,\n    highlightType,\n    getTriggerProps,\n    getDropdownProps,\n    getMenuProps,\n    getFilterProps,\n    getOptionProps,\n    highlightOption: highlightOptionWithKeyboard,\n    selectOption,\n    announceSelected,\n    dialogId\n  };\n}","map":{"version":3,"names":["useEffect","useRef","useUniqueId","isGroup","isGroupInteractive","isInteractive","useHighlightedOption","getOptionId","useMenuKeyboard","useTriggerKeyboard","useOpenState","fireNonCancelableEvent","useForwardFocus","usePrevious","connectOptionsByValue","useSelect","selectedOptions","updateSelectedOption","options","filteringType","onBlur","onFocus","externalRef","keepOpen","embedded","fireLoadItems","setFilteringValue","useInteractiveGroups","statusType","isAllSelected","isSomeSelected","toggleAll","interactivityCheck","isHighlightable","option","type","filterRef","triggerRef","menuRef","hasFilter","activeRef","__selectedOptions","__selectedValuesSet","reduce","selectedValuesSet","item","value","add","Set","highlightType","highlightedOption","highlightedIndex","moveHighlightWithKeyboard","resetHighlightWithKeyboard","setHighlightedIndexWithMouse","highlightOptionWithKeyboard","highlightFirstOptionWithMouse","goHomeWithKeyboard","goEndWithKeyboard","isOpen","openDropdown","closeDropdown","toggleDropdown","openedWithKeyboard","defaultOpen","onOpen","onClose","handleFocus","handleBlur","hasSelectedOption","length","menuId","dialogId","highlightedOptionId","closeDropdownIfNecessary","_a","current","focus","selectOption","optionToSelect","activeKeyDownHandler","goUp","goDown","goHome","goEnd","preventNativeSpace","triggerKeyDownHandler","getDropdownProps","dropdownContentId","dropdownContentRole","undefined","getTriggerProps","disabled","autoFocus","triggerProps","ref","ariaHasPopup","ariaControls","onMouseDown","event","preventDefault","onKeyDown","getFilterProps","onChange","detail","__onDelayedInput","__nativeAttributes","getMenuProps","menuProps","id","open","onMouseUp","itemIndex","onMouseMove","nativeAttributes","getGroupState","totalSelected","filter","has","hasSelected","allSelected","selected","indeterminate","getOptionProps","index","isSelectAll","highlighted","groupState","indexOf","nextOption","isNextSelected","optionProps","key","prevOpen","includes","preventScroll","highlightedGroupSelected","announceSelected","highlightOption"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/select/utils/use-select.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { RefObject } from 'react';\nimport { useEffect, useRef } from 'react';\n\nimport { useUniqueId } from '@cloudscape-design/component-toolkit/internal';\n\nimport { ButtonTriggerProps } from '../../internal/components/button-trigger';\nimport { DropdownProps } from '../../internal/components/dropdown/interfaces';\nimport { DropdownStatusProps } from '../../internal/components/dropdown-status';\nimport { DropdownOption, OptionDefinition, OptionGroup } from '../../internal/components/option/interfaces';\nimport { isGroup, isGroupInteractive, isInteractive } from '../../internal/components/option/utils/filter-options';\nimport { OptionsListProps } from '../../internal/components/options-list';\nimport { useHighlightedOption } from '../../internal/components/options-list/utils/use-highlight-option';\nimport { getOptionId } from '../../internal/components/options-list/utils/use-ids';\nimport { useMenuKeyboard, useTriggerKeyboard } from '../../internal/components/options-list/utils/use-keyboard';\nimport { useOpenState } from '../../internal/components/options-list/utils/use-open-state';\nimport { fireNonCancelableEvent, NonCancelableEventHandler } from '../../internal/events';\nimport useForwardFocus from '../../internal/hooks/forward-focus';\nimport { usePrevious } from '../../internal/hooks/use-previous';\nimport { FilterProps } from '../parts/filter';\nimport { ItemProps } from '../parts/item';\nimport { connectOptionsByValue } from './connect-options';\n\nexport type MenuProps = Omit<OptionsListProps, 'children'> & { ref: React.RefObject<HTMLUListElement> };\nexport type GetOptionProps = (option: DropdownOption, index: number) => ItemProps;\n\ninterface UseSelectProps {\n  selectedOptions: ReadonlyArray<OptionDefinition>;\n  updateSelectedOption: (option: OptionDefinition) => void;\n  options: ReadonlyArray<DropdownOption>;\n  filteringType: string;\n  keepOpen?: boolean;\n  embedded?: boolean;\n  onBlur?: NonCancelableEventHandler;\n  onFocus?: NonCancelableEventHandler;\n  externalRef: React.Ref<any>;\n  fireLoadItems: (filteringText: string) => void;\n  setFilteringValue?: (filteringText: string) => void;\n  useInteractiveGroups?: boolean;\n  statusType: DropdownStatusProps.StatusType;\n  isAllSelected?: boolean;\n  isSomeSelected?: boolean;\n  toggleAll?: () => void;\n}\n\nexport interface SelectTriggerProps extends ButtonTriggerProps {\n  ref: RefObject<HTMLButtonElement>;\n}\n\nexport function useSelect({\n  selectedOptions,\n  updateSelectedOption,\n  options,\n  filteringType,\n  onBlur,\n  onFocus,\n  externalRef,\n  keepOpen,\n  embedded,\n  fireLoadItems,\n  setFilteringValue,\n  useInteractiveGroups = false,\n  statusType,\n  isAllSelected,\n  isSomeSelected,\n  toggleAll,\n}: UseSelectProps) {\n  const interactivityCheck = useInteractiveGroups ? isGroupInteractive : isInteractive;\n\n  const isHighlightable = (option?: DropdownOption) => !!option && (useInteractiveGroups || option.type !== 'parent');\n\n  const filterRef = useRef<HTMLInputElement>(null);\n  const triggerRef = useRef<HTMLButtonElement>(null);\n  const menuRef = useRef<HTMLUListElement>(null);\n  const hasFilter = filteringType !== 'none' && !embedded;\n  const activeRef = hasFilter ? filterRef : menuRef;\n  const __selectedOptions = connectOptionsByValue(options, selectedOptions);\n  const __selectedValuesSet = selectedOptions.reduce((selectedValuesSet: Set<string>, item: OptionDefinition) => {\n    if (item.value) {\n      selectedValuesSet.add(item.value);\n    }\n    return selectedValuesSet;\n  }, new Set<string>());\n  const [\n    { highlightType, highlightedOption, highlightedIndex },\n    {\n      moveHighlightWithKeyboard,\n      resetHighlightWithKeyboard,\n      setHighlightedIndexWithMouse,\n      highlightOptionWithKeyboard,\n      highlightFirstOptionWithMouse,\n      goHomeWithKeyboard,\n      goEndWithKeyboard,\n    },\n  ] = useHighlightedOption({ options: options, isHighlightable });\n\n  const { isOpen, openDropdown, closeDropdown, toggleDropdown, openedWithKeyboard } = useOpenState({\n    defaultOpen: embedded,\n    onOpen: () => fireLoadItems(''),\n    onClose: () => {\n      resetHighlightWithKeyboard();\n      setFilteringValue?.('');\n    },\n  });\n\n  const handleFocus = () => {\n    fireNonCancelableEvent(onFocus, {});\n  };\n\n  const handleBlur = () => {\n    fireNonCancelableEvent(onBlur, {});\n    closeDropdown();\n  };\n\n  const hasSelectedOption = __selectedOptions.length > 0;\n  const menuId = useUniqueId('option-list');\n  const dialogId = useUniqueId('dialog');\n  const highlightedOptionId = getOptionId(menuId, highlightedIndex);\n\n  const closeDropdownIfNecessary = () => {\n    if (!keepOpen) {\n      triggerRef.current?.focus();\n      closeDropdown();\n    }\n  };\n\n  const selectOption = (option?: DropdownOption) => {\n    const optionToSelect = option || highlightedOption;\n    if (!optionToSelect || !interactivityCheck(optionToSelect)) {\n      return;\n    }\n    if (optionToSelect.type === 'select-all' && toggleAll) {\n      toggleAll();\n    } else {\n      updateSelectedOption(optionToSelect.option);\n    }\n    closeDropdownIfNecessary();\n  };\n\n  const activeKeyDownHandler = useMenuKeyboard({\n    goUp: () => {\n      if (\n        (!useInteractiveGroups && highlightedOption?.type === 'child' && highlightedIndex === 1) ||\n        highlightedIndex === 0\n      ) {\n        goEndWithKeyboard();\n        return;\n      }\n      moveHighlightWithKeyboard(-1);\n    },\n    goDown: () => {\n      if (highlightedIndex === options.length - 1) {\n        goHomeWithKeyboard();\n        return;\n      }\n\n      moveHighlightWithKeyboard(1);\n    },\n    selectOption,\n    goHome: goHomeWithKeyboard,\n    goEnd: goEndWithKeyboard,\n    closeDropdown: () => {\n      if (!embedded) {\n        triggerRef.current?.focus();\n        closeDropdown();\n      }\n    },\n    preventNativeSpace: !hasFilter || !!highlightedOption,\n  });\n\n  const triggerKeyDownHandler = useTriggerKeyboard({\n    openDropdown: () => openDropdown(true),\n    goHome: goHomeWithKeyboard,\n  });\n\n  const getDropdownProps: () => Pick<\n    DropdownProps,\n    'onFocus' | 'onBlur' | 'dropdownContentId' | 'dropdownContentRole'\n  > = () => ({\n    onFocus: handleFocus,\n    onBlur: handleBlur,\n    dropdownContentId: dialogId,\n    dropdownContentRole: hasFilter ? 'dialog' : undefined,\n  });\n\n  const getTriggerProps = (disabled = false, autoFocus = false) => {\n    const triggerProps: SelectTriggerProps = {\n      ref: triggerRef,\n      onFocus: () => closeDropdown(),\n      autoFocus,\n      ariaHasPopup: hasFilter ? 'dialog' : 'listbox',\n      ariaControls: isOpen ? (hasFilter ? dialogId : menuId) : undefined,\n    };\n    if (!disabled) {\n      triggerProps.onMouseDown = (event: CustomEvent) => {\n        event.preventDefault(); // prevent current focus from blurring as it immediately closes the dropdown\n        if (isOpen) {\n          triggerRef.current?.focus();\n        }\n        toggleDropdown();\n      };\n      triggerProps.onKeyDown = triggerKeyDownHandler;\n    }\n    return triggerProps;\n  };\n\n  const getFilterProps = (): Partial<FilterProps> => {\n    if (!hasFilter || !setFilteringValue) {\n      return {};\n    }\n\n    return {\n      ref: filterRef,\n      onKeyDown: activeKeyDownHandler,\n      onChange: event => {\n        setFilteringValue(event.detail.value);\n        resetHighlightWithKeyboard();\n      },\n      __onDelayedInput: event => {\n        fireLoadItems(event.detail.value);\n      },\n      __nativeAttributes: {\n        'aria-activedescendant': highlightedOptionId,\n        ['aria-owns']: menuId,\n        ['aria-controls']: menuId,\n      },\n    };\n  };\n\n  const getMenuProps = () => {\n    const menuProps: MenuProps = {\n      id: menuId,\n      ref: menuRef,\n      open: isOpen,\n      onMouseUp: itemIndex => {\n        if (itemIndex > -1) {\n          selectOption(options[itemIndex]);\n        }\n      },\n      onMouseMove: itemIndex => {\n        if (itemIndex > -1) {\n          setHighlightedIndexWithMouse(itemIndex);\n        }\n      },\n      statusType,\n    };\n    if (!hasFilter) {\n      menuProps.onKeyDown = activeKeyDownHandler;\n      menuProps.nativeAttributes = {\n        'aria-activedescendant': highlightedOptionId,\n      };\n    }\n    if (embedded) {\n      menuProps.onFocus = () => {\n        if (!highlightedOption) {\n          goHomeWithKeyboard();\n        }\n      };\n      menuProps.onBlur = () => {\n        resetHighlightWithKeyboard();\n      };\n    }\n    return menuProps;\n  };\n  const getGroupState = (option: OptionGroup) => {\n    const totalSelected = option.options.filter(item => !!item.value && __selectedValuesSet.has(item.value)).length;\n    const hasSelected = totalSelected > 0;\n    const allSelected = totalSelected === option.options.length;\n    return {\n      selected: hasSelected && allSelected && useInteractiveGroups,\n      indeterminate: hasSelected && !allSelected,\n    };\n  };\n\n  const getOptionProps = (option: DropdownOption, index: number) => {\n    const isSelectAll = option.type === 'select-all';\n    const highlighted = option === highlightedOption;\n    const groupState = isGroup(option.option) ? getGroupState(option.option) : undefined;\n    const selected = isSelectAll ? isAllSelected : __selectedOptions.indexOf(option) > -1 || !!groupState?.selected;\n    const nextOption = options[index + 1]?.option;\n    const isNextSelected =\n      !!nextOption && isGroup(nextOption)\n        ? getGroupState(nextOption).selected\n        : __selectedOptions.indexOf(options[index + 1]) > -1;\n    const optionProps: any = {\n      key: index,\n      option,\n      highlighted,\n      selected,\n      isNextSelected,\n      indeterminate: !!groupState?.indeterminate || (isSelectAll && !isAllSelected && isSomeSelected),\n      ['data-mouse-target']: isHighlightable(option) ? index : -1,\n      id: getOptionId(menuId, index),\n    };\n\n    return optionProps;\n  };\n\n  const prevOpen = usePrevious<boolean>(isOpen);\n  useEffect(() => {\n    // highlight the first selected option, when opening the Select component without filter input\n    // keep the focus in the filter input when opening, so that screenreader can recognize the combobox\n    if (isOpen && !prevOpen && options.length > 0 && !hasFilter) {\n      if (openedWithKeyboard) {\n        if (__selectedOptions[0]) {\n          highlightOptionWithKeyboard(__selectedOptions[0]);\n        } else {\n          goHomeWithKeyboard();\n        }\n      } else {\n        if (!__selectedOptions[0] || !options.includes(__selectedOptions[0])) {\n          highlightFirstOptionWithMouse();\n        } else {\n          const highlightedIndex = options.indexOf(__selectedOptions[0]);\n          setHighlightedIndexWithMouse(highlightedIndex, true);\n        }\n      }\n    }\n  }, [\n    isOpen,\n    __selectedOptions,\n    hasSelectedOption,\n    setHighlightedIndexWithMouse,\n    highlightOptionWithKeyboard,\n    highlightFirstOptionWithMouse,\n    goHomeWithKeyboard,\n    openedWithKeyboard,\n    options,\n    prevOpen,\n    hasFilter,\n  ]);\n\n  useEffect(() => {\n    if (isOpen && !embedded) {\n      // dropdown-fit calculations ensure that the dropdown will fit inside the current\n      // viewport, so prevent the browser from trying to scroll it into view (e.g. if\n      // scroll-padding-top is set on a parent)\n      activeRef.current?.focus({ preventScroll: true });\n    }\n  }, [isOpen, activeRef, embedded]);\n\n  useForwardFocus(externalRef, triggerRef as React.RefObject<HTMLElement>);\n  const highlightedGroupSelected =\n    !!highlightedOption && isGroup(highlightedOption.option) && getGroupState(highlightedOption.option).selected;\n  const announceSelected =\n    !!highlightedOption && (__selectedOptions.indexOf(highlightedOption) > -1 || highlightedGroupSelected);\n\n  return {\n    isOpen,\n    highlightedOption,\n    highlightedIndex,\n    highlightType,\n    getTriggerProps,\n    getDropdownProps,\n    getMenuProps,\n    getFilterProps,\n    getOptionProps,\n    highlightOption: highlightOptionWithKeyboard,\n    selectOption,\n    announceSelected,\n    dialogId,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}