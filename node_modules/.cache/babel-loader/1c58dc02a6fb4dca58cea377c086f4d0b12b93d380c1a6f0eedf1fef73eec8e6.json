{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport debounce from '../../debounce';\nimport { reportRuntimeApiWarning } from '../helpers/metrics';\nconst updatableProperties = ['badge', 'resizable', 'defaultSize', 'orderPriority', 'defaultActive', 'onResize'];\nexport class DrawersController {\n  constructor() {\n    this.drawers = [];\n    this.drawersRegistrationListener = null;\n    this.drawerOpenedListener = null;\n    this.drawerClosedListener = null;\n    this.drawersUpdateListeners = [];\n    this.scheduleUpdate = debounce(() => {\n      var _a;\n      (_a = this.drawersRegistrationListener) === null || _a === void 0 ? void 0 : _a.call(this, this.drawers);\n      this.drawersUpdateListeners.forEach(drawersUpdateListeners => {\n        drawersUpdateListeners === null || drawersUpdateListeners === void 0 ? void 0 : drawersUpdateListeners(this.drawers);\n      });\n    }, 0);\n    this.registerDrawer = config => {\n      if (this.drawers.find(drawer => drawer.id === config.id)) {\n        reportRuntimeApiWarning('app-layout-drawers', `drawer with id \"${config.id}\" is already registered`);\n      }\n      this.drawers = this.drawers.concat(config);\n      this.scheduleUpdate();\n    };\n    this.updateDrawer = _a => {\n      var _b;\n      var {\n          id: drawerId\n        } = _a,\n        rest = __rest(_a, [\"id\"]);\n      const drawerIndex = this.drawers.findIndex(_ref => {\n        let {\n          id\n        } = _ref;\n        return id === drawerId;\n      });\n      const oldDrawerConfig = (_b = this.drawers) === null || _b === void 0 ? void 0 : _b[drawerIndex];\n      if (!oldDrawerConfig) {\n        throw new Error(`[AwsUi] [runtime drawers] drawer with id ${drawerId} not found`);\n      }\n      const drawers = this.drawers.slice();\n      const updatedDrawer = Object.assign({}, oldDrawerConfig);\n      for (const key of updatableProperties) {\n        if (key in rest) {\n          updatedDrawer[key] = rest[key];\n        }\n      }\n      drawers[drawerIndex] = updatedDrawer;\n      this.drawers = drawers;\n      this.scheduleUpdate();\n    };\n    this.onDrawersRegistered = listener => {\n      if (this.drawersRegistrationListener !== null) {\n        reportRuntimeApiWarning('app-layout-drawers', 'multiple app layout instances detected when calling onDrawersRegistered');\n      }\n      this.drawersRegistrationListener = listener;\n      this.scheduleUpdate();\n      return () => {\n        this.drawersRegistrationListener = null;\n        this.drawersUpdateListeners = [];\n      };\n    };\n    this.clearRegisteredDrawers = () => {\n      this.drawers = [];\n    };\n    this.onDrawerOpened = listener => {\n      if (this.drawerOpenedListener !== null) {\n        reportRuntimeApiWarning('app-layout-drawers', 'multiple app layout instances detected when calling onDrawerOpened');\n      }\n      this.drawerOpenedListener = listener;\n      return () => {\n        this.drawerOpenedListener = null;\n      };\n    };\n    this.onDrawerClosed = listener => {\n      if (this.drawerClosedListener !== null) {\n        reportRuntimeApiWarning('app-layout-drawers', 'multiple app layout instances detected when calling onDrawerClosed');\n      }\n      this.drawerClosedListener = listener;\n      return () => {\n        this.drawerClosedListener = null;\n      };\n    };\n    this.openDrawer = (drawerId, params) => {\n      var _a;\n      (_a = this.drawerOpenedListener) === null || _a === void 0 ? void 0 : _a.call(this, drawerId, params);\n    };\n    this.closeDrawer = (drawerId, params) => {\n      var _a;\n      (_a = this.drawerClosedListener) === null || _a === void 0 ? void 0 : _a.call(this, drawerId, params);\n    };\n    this.onDrawersUpdated = listener => {\n      this.drawersUpdateListeners.push(listener);\n      return () => {\n        this.drawersUpdateListeners = this.drawersUpdateListeners.filter(item => item !== listener);\n      };\n    };\n    this.getDrawersState = () => {\n      return this.drawers;\n    };\n  }\n  installPublic() {\n    let api = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a, _b, _c, _d;\n    (_a = api.registerDrawer) !== null && _a !== void 0 ? _a : api.registerDrawer = this.registerDrawer;\n    (_b = api.updateDrawer) !== null && _b !== void 0 ? _b : api.updateDrawer = this.updateDrawer;\n    (_c = api.openDrawer) !== null && _c !== void 0 ? _c : api.openDrawer = this.openDrawer;\n    (_d = api.closeDrawer) !== null && _d !== void 0 ? _d : api.closeDrawer = this.closeDrawer;\n    return api;\n  }\n  installInternal() {\n    let internalApi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var _a, _b, _c, _d, _e, _f;\n    (_a = internalApi.clearRegisteredDrawers) !== null && _a !== void 0 ? _a : internalApi.clearRegisteredDrawers = this.clearRegisteredDrawers;\n    (_b = internalApi.onDrawersRegistered) !== null && _b !== void 0 ? _b : internalApi.onDrawersRegistered = this.onDrawersRegistered;\n    (_c = internalApi.onDrawerOpened) !== null && _c !== void 0 ? _c : internalApi.onDrawerOpened = this.onDrawerOpened;\n    (_d = internalApi.onDrawerClosed) !== null && _d !== void 0 ? _d : internalApi.onDrawerClosed = this.onDrawerClosed;\n    (_e = internalApi.onDrawersUpdated) !== null && _e !== void 0 ? _e : internalApi.onDrawersUpdated = this.onDrawersUpdated;\n    (_f = internalApi.getDrawersState) !== null && _f !== void 0 ? _f : internalApi.getDrawersState = this.getDrawersState;\n    return internalApi;\n  }\n}","map":{"version":3,"names":["debounce","reportRuntimeApiWarning","updatableProperties","DrawersController","constructor","drawers","drawersRegistrationListener","drawerOpenedListener","drawerClosedListener","drawersUpdateListeners","scheduleUpdate","_a","call","forEach","registerDrawer","config","find","drawer","id","concat","updateDrawer","drawerId","rest","__rest","drawerIndex","findIndex","_ref","oldDrawerConfig","_b","Error","slice","updatedDrawer","Object","assign","key","onDrawersRegistered","listener","clearRegisteredDrawers","onDrawerOpened","onDrawerClosed","openDrawer","params","closeDrawer","onDrawersUpdated","push","filter","item","getDrawersState","installPublic","api","arguments","length","undefined","_c","_d","installInternal","internalApi","_e","_f"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/internal/plugins/controllers/drawers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport debounce from '../../debounce';\nimport { NonCancelableEventHandler } from '../../events';\nimport { reportRuntimeApiWarning } from '../helpers/metrics';\n\ntype DrawerVisibilityChange = (callback: (isVisible: boolean) => void) => void;\n\ninterface MountContentContext {\n  onVisibilityChange: DrawerVisibilityChange;\n}\n\nexport interface DrawerStateChangeParams {\n  isOpen: boolean;\n  initiatedByUserAction?: boolean;\n}\n\nexport interface DrawerConfig {\n  id: string;\n  type?: 'local' | 'global';\n  ariaLabels: {\n    content?: string;\n    closeButton?: string;\n    triggerButton?: string;\n    resizeHandle?: string;\n    resizeHandleTooltipText?: string;\n    expandedModeButton?: string;\n  };\n  isExpandable?: boolean;\n  badge?: boolean;\n  resizable?: boolean;\n  defaultSize?: number;\n  onResize?: NonCancelableEventHandler<{ size: number; id: string }>;\n  orderPriority?: number;\n  defaultActive?: boolean;\n  trigger?: {\n    iconSvg: string;\n  };\n  mountContent: (container: HTMLElement, mountContext: MountContentContext) => void;\n  unmountContent: (container: HTMLElement) => void;\n  preserveInactiveContent?: boolean;\n  onToggle?: NonCancelableEventHandler<DrawerStateChangeParams>;\n}\n\nconst updatableProperties = [\n  'badge',\n  'resizable',\n  'defaultSize',\n  'orderPriority',\n  'defaultActive',\n  'onResize',\n] as const;\n\nexport type UpdateDrawerConfig = { id: DrawerConfig['id'] } & Partial<\n  Pick<DrawerConfig, (typeof updatableProperties)[number]>\n>;\n\ntype DrawersRegistrationListener = (drawers: Array<DrawerConfig>) => void;\ntype DrawersUpdateListener = (drawers: Array<DrawerConfig>) => void;\n\nexport type DrawersToggledListener = (drawerId: string, params?: OpenCloseDrawerParams) => void;\n\ninterface OpenCloseDrawerParams {\n  initiatedByUserAction: boolean;\n}\n\nexport interface DrawersApiPublic {\n  registerDrawer(config: DrawerConfig): void;\n  updateDrawer(config: UpdateDrawerConfig): void;\n  openDrawer(drawerId: string, params?: OpenCloseDrawerParams): void;\n  closeDrawer(drawerId: string, params?: OpenCloseDrawerParams): void;\n}\n\nexport interface DrawersApiInternal {\n  clearRegisteredDrawers(): void;\n  onDrawersRegistered(listener: DrawersRegistrationListener): () => void;\n  onDrawerOpened(listener: DrawersToggledListener): () => void;\n  onDrawerClosed(listener: DrawersToggledListener): () => void;\n  onDrawersUpdated(listener: DrawersUpdateListener): void;\n  getDrawersState(): Array<DrawerConfig>;\n}\n\nexport class DrawersController {\n  private drawers: Array<DrawerConfig> = [];\n  private drawersRegistrationListener: DrawersRegistrationListener | null = null;\n  private drawerOpenedListener: DrawersToggledListener | null = null;\n  private drawerClosedListener: DrawersToggledListener | null = null;\n  private drawersUpdateListeners: Array<DrawersUpdateListener> = [];\n\n  scheduleUpdate = debounce(() => {\n    this.drawersRegistrationListener?.(this.drawers);\n    this.drawersUpdateListeners.forEach(drawersUpdateListeners => {\n      drawersUpdateListeners?.(this.drawers);\n    });\n  }, 0);\n\n  registerDrawer = (config: DrawerConfig) => {\n    if (this.drawers.find(drawer => drawer.id === config.id)) {\n      reportRuntimeApiWarning('app-layout-drawers', `drawer with id \"${config.id}\" is already registered`);\n    }\n    this.drawers = this.drawers.concat(config);\n    this.scheduleUpdate();\n  };\n\n  updateDrawer = ({ id: drawerId, ...rest }: UpdateDrawerConfig) => {\n    const drawerIndex = this.drawers.findIndex(({ id }) => id === drawerId);\n    const oldDrawerConfig = this.drawers?.[drawerIndex];\n    if (!oldDrawerConfig) {\n      throw new Error(`[AwsUi] [runtime drawers] drawer with id ${drawerId} not found`);\n    }\n    const drawers = this.drawers.slice();\n    const updatedDrawer = { ...oldDrawerConfig };\n    for (const key of updatableProperties) {\n      if (key in rest) {\n        updatedDrawer[key] = (rest as any)[key];\n      }\n    }\n    drawers[drawerIndex] = updatedDrawer;\n    this.drawers = drawers;\n    this.scheduleUpdate();\n  };\n\n  onDrawersRegistered = (listener: DrawersRegistrationListener) => {\n    if (this.drawersRegistrationListener !== null) {\n      reportRuntimeApiWarning(\n        'app-layout-drawers',\n        'multiple app layout instances detected when calling onDrawersRegistered'\n      );\n    }\n    this.drawersRegistrationListener = listener;\n    this.scheduleUpdate();\n    return () => {\n      this.drawersRegistrationListener = null;\n      this.drawersUpdateListeners = [];\n    };\n  };\n\n  clearRegisteredDrawers = () => {\n    this.drawers = [];\n  };\n\n  onDrawerOpened = (listener: DrawersToggledListener) => {\n    if (this.drawerOpenedListener !== null) {\n      reportRuntimeApiWarning(\n        'app-layout-drawers',\n        'multiple app layout instances detected when calling onDrawerOpened'\n      );\n    }\n\n    this.drawerOpenedListener = listener;\n\n    return () => {\n      this.drawerOpenedListener = null;\n    };\n  };\n\n  onDrawerClosed = (listener: DrawersToggledListener) => {\n    if (this.drawerClosedListener !== null) {\n      reportRuntimeApiWarning(\n        'app-layout-drawers',\n        'multiple app layout instances detected when calling onDrawerClosed'\n      );\n    }\n\n    this.drawerClosedListener = listener;\n\n    return () => {\n      this.drawerClosedListener = null;\n    };\n  };\n\n  openDrawer = (drawerId: string, params?: OpenCloseDrawerParams) => {\n    this.drawerOpenedListener?.(drawerId, params);\n  };\n\n  closeDrawer = (drawerId: string, params?: OpenCloseDrawerParams) => {\n    this.drawerClosedListener?.(drawerId, params);\n  };\n\n  onDrawersUpdated = (listener: DrawersUpdateListener) => {\n    this.drawersUpdateListeners.push(listener);\n\n    return () => {\n      this.drawersUpdateListeners = this.drawersUpdateListeners.filter(item => item !== listener);\n    };\n  };\n\n  getDrawersState = () => {\n    return this.drawers;\n  };\n\n  installPublic(api: Partial<DrawersApiPublic> = {}): DrawersApiPublic {\n    api.registerDrawer ??= this.registerDrawer;\n    api.updateDrawer ??= this.updateDrawer;\n    api.openDrawer ??= this.openDrawer;\n    api.closeDrawer ??= this.closeDrawer;\n    return api as DrawersApiPublic;\n  }\n\n  installInternal(internalApi: Partial<DrawersApiInternal> = {}): DrawersApiInternal {\n    internalApi.clearRegisteredDrawers ??= this.clearRegisteredDrawers;\n    internalApi.onDrawersRegistered ??= this.onDrawersRegistered;\n    internalApi.onDrawerOpened ??= this.onDrawerOpened;\n    internalApi.onDrawerClosed ??= this.onDrawerClosed;\n    internalApi.onDrawersUpdated ??= this.onDrawersUpdated;\n    internalApi.getDrawersState ??= this.getDrawersState;\n    return internalApi as DrawersApiInternal;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}