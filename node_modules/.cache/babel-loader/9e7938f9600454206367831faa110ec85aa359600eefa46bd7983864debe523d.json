{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport InternalTreeItem from './tree-item';\nimport styles from './styles.css.js';\nimport testUtilStyles from './test-classes/styles.css.js';\nconst InternalTreeView = _a => {\n  var {\n      expandedItems: controlledExpandedItems,\n      items,\n      renderItem,\n      getItemId,\n      getItemChildren,\n      onItemToggle,\n      renderItemToggleIcon,\n      ariaLabel,\n      ariaLabelledby,\n      ariaDescribedby,\n      i18nStrings,\n      __internalRootRef\n    } = _a,\n    rest = __rest(_a, [\"expandedItems\", \"items\", \"renderItem\", \"getItemId\", \"getItemChildren\", \"onItemToggle\", \"renderItemToggleIcon\", \"ariaLabel\", \"ariaLabelledby\", \"ariaDescribedby\", \"i18nStrings\", \"__internalRootRef\"]);\n  const baseProps = getBaseProps(rest);\n  const [expandedItems, setExpandedItems] = useControllable(controlledExpandedItems, onItemToggle, [], {\n    componentName: 'TreeView',\n    controlledProp: 'expandedItems',\n    changeHandler: 'onItemToggle'\n  });\n  const onToggle = _ref => {\n    let {\n      id,\n      item,\n      expanded\n    } = _ref;\n    if (expanded) {\n      setExpandedItems([...(expandedItems || []), id]);\n    } else {\n      setExpandedItems((expandedItems || []).filter(expandedId => expandedId !== id));\n    }\n    fireNonCancelableEvent(onItemToggle, {\n      id,\n      item,\n      expanded\n    });\n  };\n  return React.createElement(\"div\", Object.assign({}, baseProps, {\n    ref: __internalRootRef,\n    className: clsx(baseProps.className, styles.root, testUtilStyles.root)\n  }), React.createElement(\"ul\", {\n    className: clsx(styles.tree, testUtilStyles.tree),\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledby,\n    \"aria-describedby\": ariaDescribedby\n  }, items.map((item, index) => {\n    return React.createElement(InternalTreeItem, {\n      key: index,\n      item: item,\n      level: 1,\n      index: index,\n      expandedItems: expandedItems,\n      i18nStrings: i18nStrings,\n      onItemToggle: onToggle,\n      renderItem: renderItem,\n      getItemId: getItemId,\n      getItemChildren: getItemChildren,\n      renderItemToggleIcon: renderItemToggleIcon\n    });\n  })));\n};\nexport default InternalTreeView;","map":{"version":3,"names":["React","clsx","getBaseProps","fireNonCancelableEvent","useControllable","InternalTreeItem","styles","testUtilStyles","InternalTreeView","_a","expandedItems","controlledExpandedItems","items","renderItem","getItemId","getItemChildren","onItemToggle","renderItemToggleIcon","ariaLabel","ariaLabelledby","ariaDescribedby","i18nStrings","__internalRootRef","rest","__rest","baseProps","setExpandedItems","componentName","controlledProp","changeHandler","onToggle","_ref","id","item","expanded","filter","expandedId","createElement","Object","assign","ref","className","root","tree","map","index","key","level"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/tree-view/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { getBaseProps } from '../internal/base-component';\nimport { fireNonCancelableEvent } from '../internal/events';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport { useControllable } from '../internal/hooks/use-controllable';\nimport { TreeViewProps } from './interfaces';\nimport InternalTreeItem from './tree-item';\n\nimport styles from './styles.css.js';\nimport testUtilStyles from './test-classes/styles.css.js';\n\ntype InternalTreeViewProps<T> = TreeViewProps<T> & InternalBaseComponentProps;\n\nconst InternalTreeView = <T,>({\n  expandedItems: controlledExpandedItems,\n  items,\n  renderItem,\n  getItemId,\n  getItemChildren,\n  onItemToggle,\n  renderItemToggleIcon,\n  ariaLabel,\n  ariaLabelledby,\n  ariaDescribedby,\n  i18nStrings,\n  __internalRootRef,\n  ...rest\n}: InternalTreeViewProps<T>) => {\n  const baseProps = getBaseProps(rest);\n\n  const [expandedItems, setExpandedItems] = useControllable(controlledExpandedItems, onItemToggle, [], {\n    componentName: 'TreeView',\n    controlledProp: 'expandedItems',\n    changeHandler: 'onItemToggle',\n  });\n\n  const onToggle = ({ id, item, expanded }: TreeViewProps.ItemToggleDetail<T>) => {\n    if (expanded) {\n      setExpandedItems([...(expandedItems || []), id]);\n    } else {\n      setExpandedItems((expandedItems || []).filter(expandedId => expandedId !== id));\n    }\n    fireNonCancelableEvent(onItemToggle, { id, item, expanded });\n  };\n\n  return (\n    <div {...baseProps} ref={__internalRootRef} className={clsx(baseProps.className, styles.root, testUtilStyles.root)}>\n      {/* Role `tree` isn't used in the initial release per discussion with A11Y team. It requires focus management to be implemented so they will be added as a follow up together. */}\n      <ul\n        className={clsx(styles.tree, testUtilStyles.tree)}\n        aria-label={ariaLabel}\n        aria-labelledby={ariaLabelledby}\n        aria-describedby={ariaDescribedby}\n      >\n        {items.map((item, index) => {\n          return (\n            <InternalTreeItem\n              key={index}\n              item={item}\n              level={1}\n              index={index}\n              expandedItems={expandedItems}\n              i18nStrings={i18nStrings}\n              onItemToggle={onToggle}\n              renderItem={renderItem}\n              getItemId={getItemId}\n              getItemChildren={getItemChildren}\n              renderItemToggleIcon={renderItemToggleIcon}\n            />\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default InternalTreeView;\n"],"mappings":";AAAA;AACA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,MAAM;AAEvB,SAASC,YAAY,QAAQ,4BAA4B;AACzD,SAASC,sBAAsB,QAAQ,oBAAoB;AAE3D,SAASC,eAAe,QAAQ,oCAAoC;AAEpE,OAAOC,gBAAgB,MAAM,aAAa;AAE1C,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,cAAc,MAAM,8BAA8B;AAIzD,MAAMC,gBAAgB,GAAQC,EAcH,IAAI;MAdD;MAC5BC,aAAa,EAAEC,uBAAuB;MACtCC,KAAK;MACLC,UAAU;MACVC,SAAS;MACTC,eAAe;MACfC,YAAY;MACZC,oBAAoB;MACpBC,SAAS;MACTC,cAAc;MACdC,eAAe;MACfC,WAAW;MACXC;IAAiB,IAAAb,EAEQ;IADtBc,IAAI,GAAAC,MAAA,CAAAf,EAAA,EAbqB,sMAc7B,CADQ;EAEP,MAAMgB,SAAS,GAAGvB,YAAY,CAACqB,IAAI,CAAC;EAEpC,MAAM,CAACb,aAAa,EAAEgB,gBAAgB,CAAC,GAAGtB,eAAe,CAACO,uBAAuB,EAAEK,YAAY,EAAE,EAAE,EAAE;IACnGW,aAAa,EAAE,UAAU;IACzBC,cAAc,EAAE,eAAe;IAC/BC,aAAa,EAAE;GAChB,CAAC;EAEF,MAAMC,QAAQ,GAAGC,IAAA,IAA8D;IAAA,IAA7D;MAAEC,EAAE;MAAEC,IAAI;MAAEC;IAAQ,CAAqC,GAAAH,IAAA;IACzE,IAAIG,QAAQ,EAAE;MACZR,gBAAgB,CAAC,CAAC,IAAIhB,aAAa,IAAI,EAAE,CAAC,EAAEsB,EAAE,CAAC,CAAC;KACjD,MAAM;MACLN,gBAAgB,CAAC,CAAChB,aAAa,IAAI,EAAE,EAAEyB,MAAM,CAACC,UAAU,IAAIA,UAAU,KAAKJ,EAAE,CAAC,CAAC;;IAEjF7B,sBAAsB,CAACa,YAAY,EAAE;MAAEgB,EAAE;MAAEC,IAAI;MAAEC;IAAQ,CAAE,CAAC;EAC9D,CAAC;EAED,OACElC,KAAA,CAAAqC,aAAA,QAAAC,MAAA,CAAAC,MAAA,KAASd,SAAS;IAAEe,GAAG,EAAElB,iBAAiB;IAAEmB,SAAS,EAAExC,IAAI,CAACwB,SAAS,CAACgB,SAAS,EAAEnC,MAAM,CAACoC,IAAI,EAAEnC,cAAc,CAACmC,IAAI;EAAC,IAEhH1C,KAAA,CAAAqC,aAAA;IACEI,SAAS,EAAExC,IAAI,CAACK,MAAM,CAACqC,IAAI,EAAEpC,cAAc,CAACoC,IAAI,CAAC;IAAA,cACrCzB,SAAS;IAAA,mBACJC,cAAc;IAAA,oBACbC;EAAe,GAEhCR,KAAK,CAACgC,GAAG,CAAC,CAACX,IAAI,EAAEY,KAAK,KAAI;IACzB,OACE7C,KAAA,CAAAqC,aAAA,CAAChC,gBAAgB;MACfyC,GAAG,EAAED,KAAK;MACVZ,IAAI,EAAEA,IAAI;MACVc,KAAK,EAAE,CAAC;MACRF,KAAK,EAAEA,KAAK;MACZnC,aAAa,EAAEA,aAAa;MAC5BW,WAAW,EAAEA,WAAW;MACxBL,YAAY,EAAEc,QAAQ;MACtBjB,UAAU,EAAEA,UAAU;MACtBC,SAAS,EAAEA,SAAS;MACpBC,eAAe,EAAEA,eAAe;MAChCE,oBAAoB,EAAEA;IAAoB,EAC1C;EAEN,CAAC,CAAC,CACC,CACD;AAEV,CAAC;AAED,eAAeT,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}