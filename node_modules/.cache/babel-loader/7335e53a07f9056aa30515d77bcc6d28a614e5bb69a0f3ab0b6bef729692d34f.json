{"ast":null,"code":"import { __rest } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\nimport InternalButton from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport InternalPopover from '../popover/internal';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport styles from './styles.css.js';\nimport testStyles from './test-classes/styles.css.js';\nexport default function InternalCopyToClipboard(_a) {\n  var {\n      variant = 'button',\n      copyButtonAriaLabel,\n      copyButtonText,\n      copySuccessText,\n      copyErrorText,\n      textToCopy,\n      textToDisplay,\n      popoverRenderWithPortal,\n      disabled,\n      disabledReason,\n      __internalRootRef = null\n    } = _a,\n    restProps = __rest(_a, [\"variant\", \"copyButtonAriaLabel\", \"copyButtonText\", \"copySuccessText\", \"copyErrorText\", \"textToCopy\", \"textToDisplay\", \"popoverRenderWithPortal\", \"disabled\", \"disabledReason\", \"__internalRootRef\"]);\n  const [status, setStatus] = useState('pending');\n  const [statusText, setStatusText] = useState('');\n  const baseProps = getBaseProps(restProps);\n  const onClick = () => {\n    if (!navigator.clipboard) {\n      // The clipboard API is not available in insecure contexts.\n      setStatus('error');\n      setStatusText(copyErrorText);\n      return;\n    }\n    setStatus('pending');\n    setStatusText('');\n    navigator.clipboard.writeText(textToCopy).then(() => {\n      setStatus('success');\n      setStatusText(copySuccessText);\n    }).catch(() => {\n      setStatus('error');\n      setStatusText(copyErrorText);\n    });\n  };\n  const triggerVariant = {\n    button: 'normal',\n    icon: 'icon',\n    inline: 'inline-icon'\n  }[variant];\n  const isInline = variant === 'inline';\n  const button = React.createElement(InternalButton, {\n    ariaLabel: copyButtonAriaLabel !== null && copyButtonAriaLabel !== void 0 ? copyButtonAriaLabel : copyButtonText,\n    iconName: \"copy\",\n    variant: triggerVariant,\n    wrapText: false,\n    formAction: \"none\",\n    disabled: disabled,\n    disabledReason: disabledReason\n  }, copyButtonText);\n  const trigger = disabled ? button : React.createElement(InternalPopover, {\n    isInline: isInline,\n    size: \"medium\",\n    position: \"top\",\n    triggerType: \"custom\",\n    dismissButton: false,\n    renderWithPortal: popoverRenderWithPortal,\n    content: React.createElement(InternalStatusIndicator, {\n      type: status\n    }, statusText),\n    __onOpen: onClick\n  }, button);\n  return React.createElement(\"span\", Object.assign({}, baseProps, {\n    ref: __internalRootRef,\n    className: clsx(baseProps.className, styles.root, testStyles.root)\n  }), isInline ? React.createElement(\"span\", {\n    className: styles['inline-container']\n  }, React.createElement(\"span\", {\n    className: styles['inline-container-trigger']\n  }, trigger), React.createElement(\"span\", {\n    className: clsx(testStyles['text-to-display'], testStyles['text-to-copy'])\n  }, textToDisplay !== null && textToDisplay !== void 0 ? textToDisplay : textToCopy)) : trigger);\n}","map":{"version":3,"names":["React","useState","clsx","InternalButton","getBaseProps","InternalPopover","InternalStatusIndicator","styles","testStyles","InternalCopyToClipboard","_a","variant","copyButtonAriaLabel","copyButtonText","copySuccessText","copyErrorText","textToCopy","textToDisplay","popoverRenderWithPortal","disabled","disabledReason","__internalRootRef","restProps","__rest","status","setStatus","statusText","setStatusText","baseProps","onClick","navigator","clipboard","writeText","then","catch","triggerVariant","button","icon","inline","isInline","createElement","ariaLabel","iconName","wrapText","formAction","trigger","size","position","triggerType","dismissButton","renderWithPortal","content","type","__onOpen","Object","assign","ref","className","root"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/copy-to-clipboard/internal.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useState } from 'react';\nimport clsx from 'clsx';\n\nimport InternalButton from '../button/internal';\nimport { getBaseProps } from '../internal/base-component';\nimport { InternalBaseComponentProps } from '../internal/hooks/use-base-component';\nimport InternalPopover from '../popover/internal';\nimport InternalStatusIndicator from '../status-indicator/internal';\nimport { CopyToClipboardProps } from './interfaces';\n\nimport styles from './styles.css.js';\nimport testStyles from './test-classes/styles.css.js';\n\ninterface InternalCopyToClipboardProps extends CopyToClipboardProps, InternalBaseComponentProps {}\n\nexport default function InternalCopyToClipboard({\n  variant = 'button',\n  copyButtonAriaLabel,\n  copyButtonText,\n  copySuccessText,\n  copyErrorText,\n  textToCopy,\n  textToDisplay,\n  popoverRenderWithPortal,\n  disabled,\n  disabledReason,\n  __internalRootRef = null,\n  ...restProps\n}: InternalCopyToClipboardProps) {\n  const [status, setStatus] = useState<'pending' | 'success' | 'error'>('pending');\n  const [statusText, setStatusText] = useState('');\n\n  const baseProps = getBaseProps(restProps);\n  const onClick = () => {\n    if (!navigator.clipboard) {\n      // The clipboard API is not available in insecure contexts.\n      setStatus('error');\n      setStatusText(copyErrorText);\n      return;\n    }\n\n    setStatus('pending');\n    setStatusText('');\n    navigator.clipboard\n      .writeText(textToCopy)\n      .then(() => {\n        setStatus('success');\n        setStatusText(copySuccessText);\n      })\n      .catch(() => {\n        setStatus('error');\n        setStatusText(copyErrorText);\n      });\n  };\n\n  const triggerVariant = (\n    {\n      button: 'normal',\n      icon: 'icon',\n      inline: 'inline-icon',\n    } as const\n  )[variant];\n\n  const isInline = variant === 'inline';\n\n  const button = (\n    <InternalButton\n      ariaLabel={copyButtonAriaLabel ?? copyButtonText}\n      iconName=\"copy\"\n      variant={triggerVariant}\n      wrapText={false}\n      formAction=\"none\"\n      disabled={disabled}\n      disabledReason={disabledReason}\n    >\n      {copyButtonText}\n    </InternalButton>\n  );\n\n  const trigger = disabled ? (\n    button\n  ) : (\n    <InternalPopover\n      isInline={isInline}\n      size=\"medium\"\n      position=\"top\"\n      triggerType=\"custom\"\n      dismissButton={false}\n      renderWithPortal={popoverRenderWithPortal}\n      content={<InternalStatusIndicator type={status}>{statusText}</InternalStatusIndicator>}\n      __onOpen={onClick}\n    >\n      {button}\n    </InternalPopover>\n  );\n\n  return (\n    <span {...baseProps} ref={__internalRootRef} className={clsx(baseProps.className, styles.root, testStyles.root)}>\n      {isInline ? (\n        <span className={styles['inline-container']}>\n          <span className={styles['inline-container-trigger']}>{trigger}</span>\n          <span className={clsx(testStyles['text-to-display'], testStyles['text-to-copy'])}>\n            {textToDisplay ?? textToCopy}\n          </span>\n        </span>\n      ) : (\n        trigger\n      )}\n    </span>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}