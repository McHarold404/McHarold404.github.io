{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useState } from 'react';\nimport { useUniqueId } from '@cloudscape-design/component-toolkit/internal';\nimport InternalBox from '../../box/internal';\nimport InternalButton from '../../button/internal';\nimport { useInternalI18n } from '../../i18n/context';\nimport { formatDndItemCommitted, formatDndItemReordered, formatDndStarted } from '../../internal/components/sortable-area/use-live-announcements';\nimport InternalList from '../../list/internal';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalTextFilter from '../../text-filter/internal';\nimport { getAnalyticsInnerContextAttribute } from '../analytics-metadata/utils';\nimport ContentDisplayOption from './content-display-option';\nimport { getFilteredOptions, getSortedOptions } from './utils';\nimport styles from '../styles.css.js';\nconst componentPrefix = 'content-display';\nconst getClassName = suffix => styles[`${componentPrefix}-${suffix}`];\nexport default function ContentDisplayPreference({\n  title,\n  description,\n  options,\n  value = options.map(({\n    id\n  }) => ({\n    id,\n    visible: true\n  })),\n  onChange,\n  liveAnnouncementDndStarted,\n  liveAnnouncementDndItemReordered,\n  liveAnnouncementDndItemCommitted,\n  liveAnnouncementDndDiscarded,\n  dragHandleAriaDescription,\n  dragHandleAriaLabel,\n  enableColumnFiltering = false,\n  i18nStrings\n}) {\n  const idPrefix = useUniqueId(componentPrefix);\n  const i18n = useInternalI18n('collection-preferences');\n  const [columnFilteringText, setColumnFilteringText] = useState('');\n  const titleId = `${idPrefix}-title`;\n  const descriptionId = `${idPrefix}-description`;\n  const [sortedOptions, sortedAndFilteredOptions] = useMemo(() => {\n    const sorted = getSortedOptions({\n      options,\n      contentDisplay: value\n    });\n    const filtered = getFilteredOptions(sorted, columnFilteringText);\n    return [sorted, filtered];\n  }, [columnFilteringText, options, value]);\n  const onToggle = option => {\n    // We use sortedOptions as base and not value because there might be options that\n    // are not in the value yet, so they're added as non-visible after the known ones.\n    onChange(sortedOptions.map(({\n      id,\n      visible\n    }) => ({\n      id,\n      visible: id === option.id ? !option.visible : visible\n    })));\n  };\n  return React.createElement(\"div\", Object.assign({\n    className: styles[componentPrefix]\n  }, getAnalyticsInnerContextAttribute('contentDisplay')), React.createElement(\"h3\", {\n    className: getClassName('title'),\n    id: titleId\n  }, i18n('contentDisplayPreference.title', title)), React.createElement(\"p\", {\n    className: getClassName('description'),\n    id: descriptionId\n  }, i18n('contentDisplayPreference.description', description)), enableColumnFiltering && React.createElement(\"div\", {\n    className: getClassName('text-filter')\n  }, React.createElement(InternalTextFilter, {\n    filteringText: columnFilteringText,\n    filteringPlaceholder: i18n('contentDisplayPreference.i18nStrings.columnFilteringPlaceholder', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringPlaceholder),\n    filteringAriaLabel: i18n('contentDisplayPreference.i18nStrings.columnFilteringAriaLabel', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringAriaLabel),\n    filteringClearAriaLabel: i18n('contentDisplayPreference.i18nStrings.columnFilteringClearFilterText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText),\n    onChange: ({\n      detail\n    }) => setColumnFilteringText(detail.filteringText),\n    countText: i18n('contentDisplayPreference.i18nStrings.columnFilteringCountText', (i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText) ? i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringCountText(sortedAndFilteredOptions.length) : undefined, format => format({\n      count: sortedAndFilteredOptions.length\n    }))\n  })), sortedAndFilteredOptions.length === 0 && React.createElement(\"div\", {\n    className: getClassName('no-match')\n  }, React.createElement(InternalSpaceBetween, {\n    size: \"s\",\n    alignItems: \"center\"\n  }, React.createElement(InternalBox, {\n    margin: {\n      top: 'm'\n    }\n  }, i18n('contentDisplayPreference.i18nStrings.columnFilteringNoMatchText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringNoMatchText)), React.createElement(InternalButton, {\n    onClick: () => setColumnFilteringText('')\n  }, i18n('contentDisplayPreference.i18nStrings.columnFilteringClearFilterText', i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.columnFilteringClearFilterText)))), React.createElement(InternalList, {\n    items: sortedAndFilteredOptions,\n    renderItem: item => ({\n      id: item.id,\n      content: React.createElement(ContentDisplayOption, {\n        option: item,\n        onToggle: onToggle\n      }),\n      announcementLabel: item.label\n    }),\n    disableItemPaddings: true,\n    sortable: true,\n    sortDisabled: columnFilteringText.trim().length > 0,\n    onSortingChange: ({\n      detail: {\n        items\n      }\n    }) => {\n      onChange(items);\n    },\n    ariaDescribedby: descriptionId,\n    ariaLabelledby: titleId,\n    i18nStrings: {\n      liveAnnouncementDndStarted: i18n('contentDisplayPreference.liveAnnouncementDndStarted', liveAnnouncementDndStarted, formatDndStarted),\n      liveAnnouncementDndItemReordered: i18n('contentDisplayPreference.liveAnnouncementDndItemReordered', liveAnnouncementDndItemReordered, formatDndItemReordered),\n      liveAnnouncementDndItemCommitted: i18n('contentDisplayPreference.liveAnnouncementDndItemCommitted', liveAnnouncementDndItemCommitted, formatDndItemCommitted),\n      liveAnnouncementDndDiscarded: i18n('contentDisplayPreference.liveAnnouncementDndDiscarded', liveAnnouncementDndDiscarded),\n      dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n      dragHandleAriaDescription: i18n('contentDisplayPreference.dragHandleAriaDescription', dragHandleAriaDescription)\n    }\n  }));\n}","map":{"version":3,"names":["React","useMemo","useState","useUniqueId","InternalBox","InternalButton","useInternalI18n","formatDndItemCommitted","formatDndItemReordered","formatDndStarted","InternalList","InternalSpaceBetween","InternalTextFilter","getAnalyticsInnerContextAttribute","ContentDisplayOption","getFilteredOptions","getSortedOptions","styles","componentPrefix","getClassName","suffix","ContentDisplayPreference","title","description","options","value","map","id","visible","onChange","liveAnnouncementDndStarted","liveAnnouncementDndItemReordered","liveAnnouncementDndItemCommitted","liveAnnouncementDndDiscarded","dragHandleAriaDescription","dragHandleAriaLabel","enableColumnFiltering","i18nStrings","idPrefix","i18n","columnFilteringText","setColumnFilteringText","titleId","descriptionId","sortedOptions","sortedAndFilteredOptions","sorted","contentDisplay","filtered","onToggle","option","createElement","Object","assign","className","filteringText","filteringPlaceholder","columnFilteringPlaceholder","filteringAriaLabel","columnFilteringAriaLabel","filteringClearAriaLabel","columnFilteringClearFilterText","detail","countText","columnFilteringCountText","length","undefined","format","count","size","alignItems","margin","top","columnFilteringNoMatchText","onClick","items","renderItem","item","content","announcementLabel","label","disableItemPaddings","sortable","sortDisabled","trim","onSortingChange","ariaDescribedby","ariaLabelledby"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/collection-preferences/content-display/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useMemo, useState } from 'react';\n\nimport { useUniqueId } from '@cloudscape-design/component-toolkit/internal';\n\nimport InternalBox from '../../box/internal';\nimport InternalButton from '../../button/internal';\nimport { useInternalI18n } from '../../i18n/context';\nimport {\n  formatDndItemCommitted,\n  formatDndItemReordered,\n  formatDndStarted,\n} from '../../internal/components/sortable-area/use-live-announcements';\nimport InternalList from '../../list/internal';\nimport InternalSpaceBetween from '../../space-between/internal';\nimport InternalTextFilter from '../../text-filter/internal';\nimport { getAnalyticsInnerContextAttribute } from '../analytics-metadata/utils';\nimport { CollectionPreferencesProps } from '../interfaces';\nimport ContentDisplayOption from './content-display-option';\nimport { getFilteredOptions, getSortedOptions, OptionWithVisibility } from './utils';\n\nimport styles from '../styles.css.js';\n\nconst componentPrefix = 'content-display';\n\nconst getClassName = (suffix: string) => styles[`${componentPrefix}-${suffix}`];\n\ninterface ContentDisplayPreferenceProps extends CollectionPreferencesProps.ContentDisplayPreference {\n  onChange: (value: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>) => void;\n  value?: ReadonlyArray<CollectionPreferencesProps.ContentDisplayItem>;\n}\n\nexport default function ContentDisplayPreference({\n  title,\n  description,\n  options,\n  value = options.map(({ id }) => ({\n    id,\n    visible: true,\n  })),\n  onChange,\n  liveAnnouncementDndStarted,\n  liveAnnouncementDndItemReordered,\n  liveAnnouncementDndItemCommitted,\n  liveAnnouncementDndDiscarded,\n  dragHandleAriaDescription,\n  dragHandleAriaLabel,\n  enableColumnFiltering = false,\n  i18nStrings,\n}: ContentDisplayPreferenceProps) {\n  const idPrefix = useUniqueId(componentPrefix);\n  const i18n = useInternalI18n('collection-preferences');\n  const [columnFilteringText, setColumnFilteringText] = useState('');\n\n  const titleId = `${idPrefix}-title`;\n  const descriptionId = `${idPrefix}-description`;\n\n  const [sortedOptions, sortedAndFilteredOptions] = useMemo(() => {\n    const sorted = getSortedOptions({ options, contentDisplay: value });\n    const filtered = getFilteredOptions(sorted, columnFilteringText);\n    return [sorted, filtered];\n  }, [columnFilteringText, options, value]);\n\n  const onToggle = (option: OptionWithVisibility) => {\n    // We use sortedOptions as base and not value because there might be options that\n    // are not in the value yet, so they're added as non-visible after the known ones.\n    onChange(sortedOptions.map(({ id, visible }) => ({ id, visible: id === option.id ? !option.visible : visible })));\n  };\n\n  return (\n    <div className={styles[componentPrefix]} {...getAnalyticsInnerContextAttribute('contentDisplay')}>\n      <h3 className={getClassName('title')} id={titleId}>\n        {i18n('contentDisplayPreference.title', title)}\n      </h3>\n      <p className={getClassName('description')} id={descriptionId}>\n        {i18n('contentDisplayPreference.description', description)}\n      </p>\n\n      {/* Filter input */}\n      {enableColumnFiltering && (\n        <div className={getClassName('text-filter')}>\n          <InternalTextFilter\n            filteringText={columnFilteringText}\n            filteringPlaceholder={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringPlaceholder',\n              i18nStrings?.columnFilteringPlaceholder\n            )}\n            filteringAriaLabel={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringAriaLabel',\n              i18nStrings?.columnFilteringAriaLabel\n            )}\n            filteringClearAriaLabel={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringClearFilterText',\n              i18nStrings?.columnFilteringClearFilterText\n            )}\n            onChange={({ detail }) => setColumnFilteringText(detail.filteringText)}\n            countText={i18n(\n              'contentDisplayPreference.i18nStrings.columnFilteringCountText',\n              i18nStrings?.columnFilteringCountText\n                ? i18nStrings?.columnFilteringCountText(sortedAndFilteredOptions.length)\n                : undefined,\n              format => format({ count: sortedAndFilteredOptions.length })\n            )}\n          />\n        </div>\n      )}\n\n      {/* No match */}\n      {sortedAndFilteredOptions.length === 0 && (\n        <div className={getClassName('no-match')}>\n          <InternalSpaceBetween size=\"s\" alignItems=\"center\">\n            <InternalBox margin={{ top: 'm' }}>\n              {i18n(\n                'contentDisplayPreference.i18nStrings.columnFilteringNoMatchText',\n                i18nStrings?.columnFilteringNoMatchText\n              )}\n            </InternalBox>\n            <InternalButton onClick={() => setColumnFilteringText('')}>\n              {i18n(\n                'contentDisplayPreference.i18nStrings.columnFilteringClearFilterText',\n                i18nStrings?.columnFilteringClearFilterText\n              )}\n            </InternalButton>\n          </InternalSpaceBetween>\n        </div>\n      )}\n\n      <InternalList\n        items={sortedAndFilteredOptions}\n        renderItem={item => ({\n          id: item.id,\n          content: <ContentDisplayOption option={item} onToggle={onToggle} />,\n          announcementLabel: item.label,\n        })}\n        disableItemPaddings={true}\n        sortable={true}\n        sortDisabled={columnFilteringText.trim().length > 0}\n        onSortingChange={({ detail: { items } }) => {\n          onChange(items);\n        }}\n        ariaDescribedby={descriptionId}\n        ariaLabelledby={titleId}\n        i18nStrings={{\n          liveAnnouncementDndStarted: i18n(\n            'contentDisplayPreference.liveAnnouncementDndStarted',\n            liveAnnouncementDndStarted,\n            formatDndStarted\n          ),\n          liveAnnouncementDndItemReordered: i18n(\n            'contentDisplayPreference.liveAnnouncementDndItemReordered',\n            liveAnnouncementDndItemReordered,\n            formatDndItemReordered\n          ),\n          liveAnnouncementDndItemCommitted: i18n(\n            'contentDisplayPreference.liveAnnouncementDndItemCommitted',\n            liveAnnouncementDndItemCommitted,\n            formatDndItemCommitted\n          ),\n          liveAnnouncementDndDiscarded: i18n(\n            'contentDisplayPreference.liveAnnouncementDndDiscarded',\n            liveAnnouncementDndDiscarded\n          ),\n          dragHandleAriaLabel: i18n('contentDisplayPreference.dragHandleAriaLabel', dragHandleAriaLabel),\n          dragHandleAriaDescription: i18n(\n            'contentDisplayPreference.dragHandleAriaDescription',\n            dragHandleAriaDescription\n          ),\n        }}\n      />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}