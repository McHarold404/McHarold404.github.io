{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { useEffect, useRef, useState } from 'react';\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { awsuiPluginsInternal } from '../../internal/plugins/api';\nimport { sortByPriority } from '../../internal/plugins/helpers/utils';\nimport { convertRuntimeDrawers } from '../runtime-drawer';\nimport { togglesConfig } from '../toggles';\nexport const TOOLS_DRAWER_ID = 'awsui-internal-tools';\nfunction getToolsDrawerItem(props) {\n  if (props.toolsHide) {\n    return null;\n  }\n  const {\n    iconName,\n    getLabels\n  } = togglesConfig.tools;\n  const {\n    mainLabel,\n    closeLabel,\n    openLabel\n  } = getLabels(props.ariaLabels);\n  return {\n    id: TOOLS_DRAWER_ID,\n    content: props.tools,\n    resizable: false,\n    ariaLabels: {\n      triggerButton: openLabel,\n      closeButton: closeLabel,\n      drawerName: mainLabel !== null && mainLabel !== void 0 ? mainLabel : ''\n    },\n    trigger: {\n      iconName: iconName\n    }\n  };\n}\nconst DRAWERS_LIMIT = 2;\nconst DEFAULT_ON_CHANGE_PARAMS = {\n  initiatedByUserAction: true\n};\nfunction useRuntimeDrawers(disableRuntimeDrawers, activeDrawerId, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange) {\n  const [runtimeDrawers, setRuntimeDrawers] = useState({\n    localBefore: [],\n    localAfter: [],\n    global: []\n  });\n  const onLocalDrawerChangeStable = useStableCallback(onActiveDrawerChange);\n  const onGlobalDrawersChangeStable = useStableCallback(onActiveGlobalDrawersChange);\n  const localDrawerWasOpenRef = useRef(false);\n  localDrawerWasOpenRef.current = localDrawerWasOpenRef.current || !!activeDrawerId;\n  const activeGlobalDrawersIdsRef = useRef([]);\n  activeGlobalDrawersIdsRef.current = activeGlobalDrawersIds;\n  useEffect(() => {\n    if (disableRuntimeDrawers) {\n      return;\n    }\n    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered(drawers => {\n      const localDrawers = drawers.filter(drawer => drawer.type !== 'global');\n      const globalDrawers = drawers.filter(drawer => drawer.type === 'global');\n      setRuntimeDrawers(convertRuntimeDrawers(localDrawers, globalDrawers));\n      if (!localDrawerWasOpenRef.current) {\n        const defaultActiveLocalDrawer = sortByPriority(localDrawers).find(drawer => drawer.defaultActive);\n        if (defaultActiveLocalDrawer) {\n          onLocalDrawerChangeStable(defaultActiveLocalDrawer.id, {\n            initiatedByUserAction: false\n          });\n        }\n      }\n      const drawersNotActiveByDefault = globalDrawers.filter(drawer => !drawer.defaultActive);\n      const hasDrawersOpenByUserAction = drawersNotActiveByDefault.find(drawer => activeGlobalDrawersIdsRef.current.includes(drawer.id));\n      if (hasDrawersOpenByUserAction || activeGlobalDrawersIdsRef.current.length === DRAWERS_LIMIT) {\n        return;\n      }\n      const defaultActiveGlobalDrawers = sortByPriority(globalDrawers).filter(drawer => !activeGlobalDrawersIdsRef.current.includes(drawer.id) && drawer.defaultActive);\n      defaultActiveGlobalDrawers.forEach(drawer => {\n        onGlobalDrawersChangeStable(drawer.id, {\n          initiatedByUserAction: false\n        });\n      });\n    });\n    return () => {\n      unsubscribe();\n      setRuntimeDrawers({\n        localBefore: [],\n        localAfter: [],\n        global: []\n      });\n    };\n  }, [disableRuntimeDrawers, onGlobalDrawersChangeStable, onLocalDrawerChangeStable]);\n  return runtimeDrawers;\n}\nfunction useDrawerRuntimeOpenClose(disableRuntimeDrawers, localDrawers, globalDrawers, activeDrawerId, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange) {\n  const onDrawerOpened = useStableCallback(function (drawerId) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ON_CHANGE_PARAMS;\n    const localDrawer = localDrawers === null || localDrawers === void 0 ? void 0 : localDrawers.find(drawer => drawer.id === drawerId);\n    const globalDrawer = globalDrawers.find(drawer => drawer.id === drawerId);\n    if (localDrawer && activeDrawerId !== drawerId) {\n      onActiveDrawerChange(drawerId, params);\n    }\n    if (globalDrawer && !activeGlobalDrawersIds.includes(drawerId)) {\n      onActiveGlobalDrawersChange(drawerId, params);\n    }\n  });\n  const onDrawerClosed = useStableCallback(function (drawerId) {\n    let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ON_CHANGE_PARAMS;\n    const localDrawer = localDrawers === null || localDrawers === void 0 ? void 0 : localDrawers.find(drawer => drawer.id === drawerId);\n    const globalDrawer = globalDrawers.find(drawer => drawer.id === drawerId);\n    if (localDrawer && activeDrawerId === drawerId) {\n      onActiveDrawerChange(null, params);\n    }\n    if (globalDrawer && activeGlobalDrawersIds.includes(drawerId)) {\n      onActiveGlobalDrawersChange(drawerId, params);\n    }\n  });\n  useEffect(() => {\n    if (disableRuntimeDrawers) {\n      return;\n    }\n    return awsuiPluginsInternal.appLayout.onDrawerOpened(onDrawerOpened);\n  }, [disableRuntimeDrawers, onDrawerOpened]);\n  useEffect(() => {\n    if (disableRuntimeDrawers) {\n      return;\n    }\n    return awsuiPluginsInternal.appLayout.onDrawerClosed(onDrawerClosed);\n  }, [disableRuntimeDrawers, onDrawerClosed]);\n}\nfunction applyToolsDrawer(toolsProps, runtimeDrawers) {\n  const drawers = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter];\n  if (drawers.length === 0 && toolsProps.disableDrawersMerge) {\n    return null;\n  }\n  const toolsItem = getToolsDrawerItem(toolsProps);\n  if (toolsItem) {\n    drawers.unshift(toolsItem);\n  }\n  return drawers;\n}\nexport const MIN_DRAWER_SIZE = 290;\nexport function useDrawers(_ref, ariaLabels, toolsProps) {\n  let {\n    drawers,\n    activeDrawerId: controlledActiveDrawerId,\n    onDrawerChange,\n    onGlobalDrawerFocus,\n    onAddNewActiveDrawer,\n    __disableRuntimeDrawers: disableRuntimeDrawers\n  } = _ref;\n  var _a, _b, _c, _d;\n  const [activeDrawerId = null, setActiveDrawerId] = useControllable(controlledActiveDrawerId, onDrawerChange, null, {\n    componentName: 'AppLayout',\n    controlledProp: 'activeDrawerId',\n    changeHandler: 'onChange'\n  });\n  const [activeGlobalDrawersIds, setActiveGlobalDrawersIds] = useState([]);\n  const [drawerSizes, setDrawerSizes] = useState({});\n  const [expandedDrawerId, setExpandedDrawerId] = useState(null);\n  // FIFO queue that keeps track of open drawers, where the first element is the most recently opened drawer\n  const drawersOpenQueue = useRef([]);\n  function onActiveDrawerResize(_ref2) {\n    let {\n      id,\n      size\n    } = _ref2;\n    setDrawerSizes(oldSizes => Object.assign(Object.assign({}, oldSizes), {\n      [id]: size\n    }));\n    fireNonCancelableEvent(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.onResize, {\n      id,\n      size\n    });\n    const activeGlobalDrawer = runtimeGlobalDrawers.find(drawer => drawer.id === id);\n    fireNonCancelableEvent(activeGlobalDrawer === null || activeGlobalDrawer === void 0 ? void 0 : activeGlobalDrawer.onResize, {\n      id,\n      size\n    });\n  }\n  function onActiveDrawerChange(newDrawerId) {\n    let {\n      initiatedByUserAction\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ON_CHANGE_PARAMS;\n    var _a, _b;\n    setActiveDrawerId(newDrawerId);\n    if (newDrawerId) {\n      onAddNewActiveDrawer === null || onAddNewActiveDrawer === void 0 ? void 0 : onAddNewActiveDrawer(newDrawerId);\n    }\n    if (hasOwnDrawers) {\n      fireNonCancelableEvent(onDrawerChange, {\n        activeDrawerId: newDrawerId\n      });\n    } else if (!toolsProps.toolsHide) {\n      toolsProps.onToolsToggle(newDrawerId === TOOLS_DRAWER_ID);\n    }\n    if (newDrawerId) {\n      drawersOpenQueue.current = [newDrawerId, ...drawersOpenQueue.current];\n      const newDrawer = (_a = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter]) === null || _a === void 0 ? void 0 : _a.find(drawer => drawer.id === newDrawerId);\n      fireNonCancelableEvent(newDrawer === null || newDrawer === void 0 ? void 0 : newDrawer.onToggle, {\n        isOpen: true,\n        initiatedByUserAction\n      });\n    }\n    if (activeDrawerId) {\n      drawersOpenQueue.current = drawersOpenQueue.current.filter(id => id !== activeDrawerId);\n      const activeDrawer = (_b = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter]) === null || _b === void 0 ? void 0 : _b.find(drawer => drawer.id === activeDrawerId);\n      fireNonCancelableEvent(activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.onToggle, {\n        isOpen: false,\n        initiatedByUserAction\n      });\n    }\n  }\n  function onActiveGlobalDrawersChange(drawerId) {\n    let {\n      initiatedByUserAction\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_ON_CHANGE_PARAMS;\n    const drawer = runtimeGlobalDrawers.find(drawer => drawer.id === drawerId);\n    if (activeGlobalDrawersIds.includes(drawerId)) {\n      setActiveGlobalDrawersIds(currentState => currentState.filter(id => id !== drawerId));\n      onGlobalDrawerFocus === null || onGlobalDrawerFocus === void 0 ? void 0 : onGlobalDrawerFocus(drawerId, false);\n      drawersOpenQueue.current = drawersOpenQueue.current.filter(id => id !== drawerId);\n      fireNonCancelableEvent(drawer === null || drawer === void 0 ? void 0 : drawer.onToggle, {\n        isOpen: false,\n        initiatedByUserAction\n      });\n      if (drawerId === expandedDrawerId) {\n        setExpandedDrawerId(null);\n      }\n    } else if (drawerId) {\n      onAddNewActiveDrawer === null || onAddNewActiveDrawer === void 0 ? void 0 : onAddNewActiveDrawer(drawerId);\n      setActiveGlobalDrawersIds(currentState => [drawerId, ...currentState].slice(0, DRAWERS_LIMIT));\n      onGlobalDrawerFocus === null || onGlobalDrawerFocus === void 0 ? void 0 : onGlobalDrawerFocus(drawerId, true);\n      drawersOpenQueue.current = [drawerId, ...drawersOpenQueue.current];\n      fireNonCancelableEvent(drawer === null || drawer === void 0 ? void 0 : drawer.onToggle, {\n        isOpen: true,\n        initiatedByUserAction\n      });\n    }\n  }\n  const hasOwnDrawers = !!drawers;\n  // support toolsOpen in runtime-drawers-only mode\n  let activeDrawerIdResolved = (toolsProps === null || toolsProps === void 0 ? void 0 : toolsProps.toolsOpen) && !hasOwnDrawers ? TOOLS_DRAWER_ID : activeDrawerId !== TOOLS_DRAWER_ID ? activeDrawerId : null;\n  const runtimeDrawers = useRuntimeDrawers(disableRuntimeDrawers, activeDrawerIdResolved, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange);\n  const {\n    localBefore,\n    localAfter,\n    global: runtimeGlobalDrawers\n  } = runtimeDrawers;\n  const combinedLocalDrawers = drawers ? [...localBefore, ...drawers, ...localAfter] : applyToolsDrawer(toolsProps, runtimeDrawers);\n  const activeDrawer = combinedLocalDrawers === null || combinedLocalDrawers === void 0 ? void 0 : combinedLocalDrawers.find(drawer => drawer.id === activeDrawerIdResolved);\n  // ensure that id is only defined when the drawer exists\n  activeDrawerIdResolved = (_a = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.id) !== null && _a !== void 0 ? _a : null;\n  const activeGlobalDrawers = runtimeGlobalDrawers.filter(drawer => activeGlobalDrawersIds.includes(drawer.id));\n  useDrawerRuntimeOpenClose(disableRuntimeDrawers, combinedLocalDrawers, runtimeGlobalDrawers, activeDrawerId, onActiveDrawerChange, activeGlobalDrawersIds, onActiveGlobalDrawersChange);\n  const activeDrawerSize = activeDrawerIdResolved ? (_c = (_b = drawerSizes[activeDrawerIdResolved]) !== null && _b !== void 0 ? _b : activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _c !== void 0 ? _c : toolsProps.toolsWidth : toolsProps.toolsWidth;\n  const activeGlobalDrawersSizes = activeGlobalDrawersIds.reduce((acc, currentGlobalDrawerId) => {\n    var _a, _b;\n    const currentGlobalDrawer = runtimeGlobalDrawers.find(drawer => drawer.id === currentGlobalDrawerId);\n    return Object.assign(Object.assign({}, acc), {\n      [currentGlobalDrawerId]: (_b = (_a = drawerSizes[currentGlobalDrawerId]) !== null && _a !== void 0 ? _a : currentGlobalDrawer === null || currentGlobalDrawer === void 0 ? void 0 : currentGlobalDrawer.defaultSize) !== null && _b !== void 0 ? _b : MIN_DRAWER_SIZE\n    });\n  }, {});\n  const minGlobalDrawersSizes = runtimeGlobalDrawers.reduce((acc, globalDrawer) => {\n    var _a;\n    return Object.assign(Object.assign({}, acc), {\n      [globalDrawer.id]: Math.min((_a = globalDrawer.defaultSize) !== null && _a !== void 0 ? _a : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE)\n    });\n  }, {});\n  const minDrawerSize = Math.min((toolsProps === null || toolsProps === void 0 ? void 0 : toolsProps.toolsOpen) ? toolsProps.toolsWidth : (_d = activeDrawer === null || activeDrawer === void 0 ? void 0 : activeDrawer.defaultSize) !== null && _d !== void 0 ? _d : MIN_DRAWER_SIZE, MIN_DRAWER_SIZE);\n  return {\n    ariaLabelsWithDrawers: ariaLabels,\n    drawers: combinedLocalDrawers || undefined,\n    activeDrawer,\n    activeDrawerId: activeDrawerIdResolved,\n    globalDrawers: runtimeGlobalDrawers,\n    activeGlobalDrawers: activeGlobalDrawers,\n    activeGlobalDrawersIds,\n    activeGlobalDrawersSizes,\n    activeDrawerSize,\n    minDrawerSize,\n    minGlobalDrawersSizes,\n    drawerSizes,\n    drawersOpenQueue: drawersOpenQueue.current,\n    onActiveDrawerChange,\n    onActiveDrawerResize,\n    onActiveGlobalDrawersChange,\n    expandedDrawerId,\n    setExpandedDrawerId\n  };\n}","map":{"version":3,"names":["useEffect","useRef","useState","useStableCallback","fireNonCancelableEvent","useControllable","awsuiPluginsInternal","sortByPriority","convertRuntimeDrawers","togglesConfig","TOOLS_DRAWER_ID","getToolsDrawerItem","props","toolsHide","iconName","getLabels","tools","mainLabel","closeLabel","openLabel","ariaLabels","id","content","resizable","triggerButton","closeButton","drawerName","trigger","DRAWERS_LIMIT","DEFAULT_ON_CHANGE_PARAMS","initiatedByUserAction","useRuntimeDrawers","disableRuntimeDrawers","activeDrawerId","onActiveDrawerChange","activeGlobalDrawersIds","onActiveGlobalDrawersChange","runtimeDrawers","setRuntimeDrawers","localBefore","localAfter","global","onLocalDrawerChangeStable","onGlobalDrawersChangeStable","localDrawerWasOpenRef","current","activeGlobalDrawersIdsRef","unsubscribe","appLayout","onDrawersRegistered","drawers","localDrawers","filter","drawer","type","globalDrawers","defaultActiveLocalDrawer","find","defaultActive","drawersNotActiveByDefault","hasDrawersOpenByUserAction","includes","length","defaultActiveGlobalDrawers","forEach","useDrawerRuntimeOpenClose","onDrawerOpened","drawerId","params","arguments","undefined","localDrawer","globalDrawer","onDrawerClosed","applyToolsDrawer","toolsProps","disableDrawersMerge","toolsItem","unshift","MIN_DRAWER_SIZE","useDrawers","_ref","controlledActiveDrawerId","onDrawerChange","onGlobalDrawerFocus","onAddNewActiveDrawer","__disableRuntimeDrawers","setActiveDrawerId","componentName","controlledProp","changeHandler","setActiveGlobalDrawersIds","drawerSizes","setDrawerSizes","expandedDrawerId","setExpandedDrawerId","drawersOpenQueue","onActiveDrawerResize","_ref2","size","oldSizes","Object","assign","activeDrawer","onResize","activeGlobalDrawer","runtimeGlobalDrawers","newDrawerId","hasOwnDrawers","onToolsToggle","newDrawer","_a","onToggle","isOpen","_b","currentState","slice","activeDrawerIdResolved","toolsOpen","combinedLocalDrawers","activeGlobalDrawers","activeDrawerSize","_c","defaultSize","toolsWidth","activeGlobalDrawersSizes","reduce","acc","currentGlobalDrawerId","currentGlobalDrawer","minGlobalDrawersSizes","Math","min","minDrawerSize","_d","ariaLabelsWithDrawers"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/app-layout/utils/use-drawers.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React, { useEffect, useRef, useState } from 'react';\n\nimport { useStableCallback } from '@cloudscape-design/component-toolkit/internal';\n\nimport { fireNonCancelableEvent } from '../../internal/events';\nimport { useControllable } from '../../internal/hooks/use-controllable';\nimport { awsuiPluginsInternal } from '../../internal/plugins/api';\nimport { DrawersToggledListener } from '../../internal/plugins/controllers/drawers';\nimport { sortByPriority } from '../../internal/plugins/helpers/utils';\nimport { AppLayoutProps } from '../interfaces';\nimport { convertRuntimeDrawers, DrawersLayout } from '../runtime-drawer';\nimport { togglesConfig } from '../toggles';\n\nexport const TOOLS_DRAWER_ID = 'awsui-internal-tools';\n\ninterface ToolsProps {\n  toolsHide: boolean | undefined;\n  toolsOpen: boolean | undefined;\n  toolsWidth: number;\n  tools: React.ReactNode | undefined;\n  onToolsToggle: (newOpen: boolean) => void;\n  ariaLabels: AppLayoutProps.Labels | undefined;\n  disableDrawersMerge?: boolean;\n}\n\nexport interface OnChangeParams {\n  initiatedByUserAction: boolean;\n}\n\nfunction getToolsDrawerItem(props: ToolsProps): AppLayoutProps.Drawer | null {\n  if (props.toolsHide) {\n    return null;\n  }\n  const { iconName, getLabels } = togglesConfig.tools;\n  const { mainLabel, closeLabel, openLabel } = getLabels(props.ariaLabels);\n  return {\n    id: TOOLS_DRAWER_ID,\n    content: props.tools,\n    resizable: false,\n    ariaLabels: {\n      triggerButton: openLabel,\n      closeButton: closeLabel,\n      drawerName: mainLabel ?? '',\n    },\n    trigger: {\n      iconName: iconName,\n    },\n  };\n}\n\nconst DRAWERS_LIMIT = 2;\n\nconst DEFAULT_ON_CHANGE_PARAMS = { initiatedByUserAction: true };\n\nfunction useRuntimeDrawers(\n  disableRuntimeDrawers: boolean | undefined,\n  activeDrawerId: string | null,\n  onActiveDrawerChange: (newDrawerId: string | null, { initiatedByUserAction }: OnChangeParams) => void,\n  activeGlobalDrawersIds: Array<string>,\n  onActiveGlobalDrawersChange: (newDrawerId: string, { initiatedByUserAction }: OnChangeParams) => void\n) {\n  const [runtimeDrawers, setRuntimeDrawers] = useState<DrawersLayout>({\n    localBefore: [],\n    localAfter: [],\n    global: [],\n  });\n  const onLocalDrawerChangeStable = useStableCallback(onActiveDrawerChange);\n  const onGlobalDrawersChangeStable = useStableCallback(onActiveGlobalDrawersChange);\n\n  const localDrawerWasOpenRef = useRef(false);\n  localDrawerWasOpenRef.current = localDrawerWasOpenRef.current || !!activeDrawerId;\n  const activeGlobalDrawersIdsRef = useRef<Array<string>>([]);\n  activeGlobalDrawersIdsRef.current = activeGlobalDrawersIds;\n\n  useEffect(() => {\n    if (disableRuntimeDrawers) {\n      return;\n    }\n    const unsubscribe = awsuiPluginsInternal.appLayout.onDrawersRegistered(drawers => {\n      const localDrawers = drawers.filter(drawer => drawer.type !== 'global');\n      const globalDrawers = drawers.filter(drawer => drawer.type === 'global');\n      setRuntimeDrawers(convertRuntimeDrawers(localDrawers, globalDrawers));\n      if (!localDrawerWasOpenRef.current) {\n        const defaultActiveLocalDrawer = sortByPriority(localDrawers).find(drawer => drawer.defaultActive);\n        if (defaultActiveLocalDrawer) {\n          onLocalDrawerChangeStable(defaultActiveLocalDrawer.id, { initiatedByUserAction: false });\n        }\n      }\n\n      const drawersNotActiveByDefault = globalDrawers.filter(drawer => !drawer.defaultActive);\n      const hasDrawersOpenByUserAction = drawersNotActiveByDefault.find(drawer =>\n        activeGlobalDrawersIdsRef.current.includes(drawer.id)\n      );\n      if (hasDrawersOpenByUserAction || activeGlobalDrawersIdsRef.current.length === DRAWERS_LIMIT) {\n        return;\n      }\n\n      const defaultActiveGlobalDrawers = sortByPriority(globalDrawers).filter(\n        drawer => !activeGlobalDrawersIdsRef.current.includes(drawer.id) && drawer.defaultActive\n      );\n      defaultActiveGlobalDrawers.forEach(drawer => {\n        onGlobalDrawersChangeStable(drawer.id, { initiatedByUserAction: false });\n      });\n    });\n    return () => {\n      unsubscribe();\n      setRuntimeDrawers({ localBefore: [], localAfter: [], global: [] });\n    };\n  }, [disableRuntimeDrawers, onGlobalDrawersChangeStable, onLocalDrawerChangeStable]);\n\n  return runtimeDrawers;\n}\n\nfunction useDrawerRuntimeOpenClose(\n  disableRuntimeDrawers: boolean | undefined,\n  localDrawers: AppLayoutProps.Drawer[] | null,\n  globalDrawers: AppLayoutProps.Drawer[],\n  activeDrawerId: string | null,\n  onActiveDrawerChange: (newDrawerId: string | null, { initiatedByUserAction }: OnChangeParams) => void,\n  activeGlobalDrawersIds: Array<string>,\n  onActiveGlobalDrawersChange: (newDrawerId: string, { initiatedByUserAction }: OnChangeParams) => void\n) {\n  const onDrawerOpened: DrawersToggledListener = useStableCallback((drawerId, params = DEFAULT_ON_CHANGE_PARAMS) => {\n    const localDrawer = localDrawers?.find(drawer => drawer.id === drawerId);\n    const globalDrawer = globalDrawers.find(drawer => drawer.id === drawerId);\n    if (localDrawer && activeDrawerId !== drawerId) {\n      onActiveDrawerChange(drawerId, params);\n    }\n    if (globalDrawer && !activeGlobalDrawersIds.includes(drawerId)) {\n      onActiveGlobalDrawersChange(drawerId, params);\n    }\n  });\n\n  const onDrawerClosed: DrawersToggledListener = useStableCallback((drawerId, params = DEFAULT_ON_CHANGE_PARAMS) => {\n    const localDrawer = localDrawers?.find(drawer => drawer.id === drawerId);\n    const globalDrawer = globalDrawers.find(drawer => drawer.id === drawerId);\n    if (localDrawer && activeDrawerId === drawerId) {\n      onActiveDrawerChange(null, params);\n    }\n    if (globalDrawer && activeGlobalDrawersIds.includes(drawerId)) {\n      onActiveGlobalDrawersChange(drawerId, params);\n    }\n  });\n\n  useEffect(() => {\n    if (disableRuntimeDrawers) {\n      return;\n    }\n    return awsuiPluginsInternal.appLayout.onDrawerOpened(onDrawerOpened);\n  }, [disableRuntimeDrawers, onDrawerOpened]);\n\n  useEffect(() => {\n    if (disableRuntimeDrawers) {\n      return;\n    }\n    return awsuiPluginsInternal.appLayout.onDrawerClosed(onDrawerClosed);\n  }, [disableRuntimeDrawers, onDrawerClosed]);\n}\n\nfunction applyToolsDrawer(toolsProps: ToolsProps, runtimeDrawers: DrawersLayout) {\n  const drawers = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter];\n  if (drawers.length === 0 && toolsProps.disableDrawersMerge) {\n    return null;\n  }\n  const toolsItem = getToolsDrawerItem(toolsProps);\n  if (toolsItem) {\n    drawers.unshift(toolsItem);\n  }\n\n  return drawers;\n}\n\nexport const MIN_DRAWER_SIZE = 290;\n\ntype UseDrawersProps = Pick<AppLayoutProps, 'drawers' | 'activeDrawerId' | 'onDrawerChange'> & {\n  __disableRuntimeDrawers?: boolean;\n  onGlobalDrawerFocus?: (drawerId: string, open: boolean) => void;\n  onAddNewActiveDrawer?: (drawerId: string) => void;\n};\n\nexport function useDrawers(\n  {\n    drawers,\n    activeDrawerId: controlledActiveDrawerId,\n    onDrawerChange,\n    onGlobalDrawerFocus,\n    onAddNewActiveDrawer,\n    __disableRuntimeDrawers: disableRuntimeDrawers,\n  }: UseDrawersProps,\n  ariaLabels: AppLayoutProps['ariaLabels'],\n  toolsProps: ToolsProps\n) {\n  const [activeDrawerId = null, setActiveDrawerId] = useControllable(controlledActiveDrawerId, onDrawerChange, null, {\n    componentName: 'AppLayout',\n    controlledProp: 'activeDrawerId',\n    changeHandler: 'onChange',\n  });\n  const [activeGlobalDrawersIds, setActiveGlobalDrawersIds] = useState<Array<string>>([]);\n  const [drawerSizes, setDrawerSizes] = useState<Record<string, number>>({});\n  const [expandedDrawerId, setExpandedDrawerId] = useState<string | null>(null);\n  // FIFO queue that keeps track of open drawers, where the first element is the most recently opened drawer\n  const drawersOpenQueue = useRef<Array<string>>([]);\n\n  function onActiveDrawerResize({ id, size }: { id: string; size: number }) {\n    setDrawerSizes(oldSizes => ({ ...oldSizes, [id]: size }));\n    fireNonCancelableEvent(activeDrawer?.onResize, { id, size });\n    const activeGlobalDrawer = runtimeGlobalDrawers.find(drawer => drawer.id === id);\n    fireNonCancelableEvent(activeGlobalDrawer?.onResize, { id, size });\n  }\n\n  function onActiveDrawerChange(\n    newDrawerId: string | null,\n    { initiatedByUserAction }: OnChangeParams = DEFAULT_ON_CHANGE_PARAMS\n  ) {\n    setActiveDrawerId(newDrawerId);\n    if (newDrawerId) {\n      onAddNewActiveDrawer?.(newDrawerId);\n    }\n    if (hasOwnDrawers) {\n      fireNonCancelableEvent(onDrawerChange, { activeDrawerId: newDrawerId });\n    } else if (!toolsProps.toolsHide) {\n      toolsProps.onToolsToggle(newDrawerId === TOOLS_DRAWER_ID);\n    }\n\n    if (newDrawerId) {\n      drawersOpenQueue.current = [newDrawerId, ...drawersOpenQueue.current];\n      const newDrawer = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter]?.find(\n        drawer => drawer.id === newDrawerId\n      );\n      fireNonCancelableEvent(newDrawer?.onToggle, { isOpen: true, initiatedByUserAction });\n    }\n\n    if (activeDrawerId) {\n      drawersOpenQueue.current = drawersOpenQueue.current.filter(id => id !== activeDrawerId);\n      const activeDrawer = [...runtimeDrawers.localBefore, ...runtimeDrawers.localAfter]?.find(\n        drawer => drawer.id === activeDrawerId\n      );\n      fireNonCancelableEvent(activeDrawer?.onToggle, { isOpen: false, initiatedByUserAction });\n    }\n  }\n\n  function onActiveGlobalDrawersChange(\n    drawerId: string,\n    { initiatedByUserAction }: Partial<OnChangeParams> = DEFAULT_ON_CHANGE_PARAMS\n  ) {\n    const drawer = runtimeGlobalDrawers.find(drawer => drawer.id === drawerId);\n    if (activeGlobalDrawersIds.includes(drawerId)) {\n      setActiveGlobalDrawersIds(currentState => currentState.filter(id => id !== drawerId));\n      onGlobalDrawerFocus?.(drawerId, false);\n      drawersOpenQueue.current = drawersOpenQueue.current.filter(id => id !== drawerId);\n      fireNonCancelableEvent(drawer?.onToggle, { isOpen: false, initiatedByUserAction });\n      if (drawerId === expandedDrawerId) {\n        setExpandedDrawerId(null);\n      }\n    } else if (drawerId) {\n      onAddNewActiveDrawer?.(drawerId);\n      setActiveGlobalDrawersIds(currentState => [drawerId, ...currentState].slice(0, DRAWERS_LIMIT!));\n      onGlobalDrawerFocus?.(drawerId, true);\n      drawersOpenQueue.current = [drawerId, ...drawersOpenQueue.current];\n      fireNonCancelableEvent(drawer?.onToggle, { isOpen: true, initiatedByUserAction });\n    }\n  }\n\n  const hasOwnDrawers = !!drawers;\n  // support toolsOpen in runtime-drawers-only mode\n  let activeDrawerIdResolved =\n    toolsProps?.toolsOpen && !hasOwnDrawers\n      ? TOOLS_DRAWER_ID\n      : activeDrawerId !== TOOLS_DRAWER_ID\n        ? activeDrawerId\n        : null;\n  const runtimeDrawers = useRuntimeDrawers(\n    disableRuntimeDrawers,\n    activeDrawerIdResolved,\n    onActiveDrawerChange,\n    activeGlobalDrawersIds,\n    onActiveGlobalDrawersChange\n  );\n  const { localBefore, localAfter, global: runtimeGlobalDrawers } = runtimeDrawers;\n  const combinedLocalDrawers = drawers\n    ? [...localBefore, ...drawers, ...localAfter]\n    : applyToolsDrawer(toolsProps, runtimeDrawers);\n  const activeDrawer = combinedLocalDrawers?.find(drawer => drawer.id === activeDrawerIdResolved);\n  // ensure that id is only defined when the drawer exists\n  activeDrawerIdResolved = activeDrawer?.id ?? null;\n  const activeGlobalDrawers = runtimeGlobalDrawers.filter(drawer => activeGlobalDrawersIds.includes(drawer.id));\n\n  useDrawerRuntimeOpenClose(\n    disableRuntimeDrawers,\n    combinedLocalDrawers,\n    runtimeGlobalDrawers,\n    activeDrawerId,\n    onActiveDrawerChange,\n    activeGlobalDrawersIds,\n    onActiveGlobalDrawersChange\n  );\n\n  const activeDrawerSize = activeDrawerIdResolved\n    ? (drawerSizes[activeDrawerIdResolved] ?? activeDrawer?.defaultSize ?? toolsProps.toolsWidth)\n    : toolsProps.toolsWidth;\n  const activeGlobalDrawersSizes: Record<string, number> = activeGlobalDrawersIds.reduce(\n    (acc, currentGlobalDrawerId) => {\n      const currentGlobalDrawer = runtimeGlobalDrawers.find(drawer => drawer.id === currentGlobalDrawerId);\n      return {\n        ...acc,\n        [currentGlobalDrawerId]:\n          drawerSizes[currentGlobalDrawerId] ?? currentGlobalDrawer?.defaultSize ?? MIN_DRAWER_SIZE,\n      };\n    },\n    {}\n  );\n  const minGlobalDrawersSizes: Record<string, number> = runtimeGlobalDrawers.reduce((acc, globalDrawer) => {\n    return {\n      ...acc,\n      [globalDrawer.id]: Math.min(globalDrawer.defaultSize ?? MIN_DRAWER_SIZE, MIN_DRAWER_SIZE),\n    };\n  }, {});\n  const minDrawerSize = Math.min(\n    toolsProps?.toolsOpen ? toolsProps.toolsWidth : (activeDrawer?.defaultSize ?? MIN_DRAWER_SIZE),\n    MIN_DRAWER_SIZE\n  );\n\n  return {\n    ariaLabelsWithDrawers: ariaLabels,\n    drawers: combinedLocalDrawers || undefined,\n    activeDrawer,\n    activeDrawerId: activeDrawerIdResolved,\n    globalDrawers: runtimeGlobalDrawers,\n    activeGlobalDrawers: activeGlobalDrawers,\n    activeGlobalDrawersIds,\n    activeGlobalDrawersSizes,\n    activeDrawerSize,\n    minDrawerSize,\n    minGlobalDrawersSizes,\n    drawerSizes,\n    drawersOpenQueue: drawersOpenQueue.current,\n    onActiveDrawerChange,\n    onActiveDrawerResize,\n    onActiveGlobalDrawersChange,\n    expandedDrawerId,\n    setExpandedDrawerId,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}