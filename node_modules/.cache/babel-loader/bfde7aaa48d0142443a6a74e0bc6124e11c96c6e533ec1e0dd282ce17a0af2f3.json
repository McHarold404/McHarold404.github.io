{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\nimport { useInternalI18n } from '../../i18n/context';\nimport { ExpandToggleButton } from '../../internal/components/expand-toggle-button';\nimport InternalStructuredItem from '../../internal/components/structured-item';\nimport { joinStrings } from '../../internal/utils/strings';\nimport testUtilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\nconst InternalTreeItem = _ref => {\n  let {\n    item,\n    index,\n    level,\n    i18nStrings,\n    expandedItems = [],\n    renderItemToggleIcon,\n    renderItem,\n    getItemId,\n    getItemChildren,\n    onItemToggle\n  } = _ref;\n  var _a, _b;\n  const i18n = useInternalI18n('tree-view');\n  const {\n    icon,\n    content,\n    secondaryContent,\n    actions,\n    announcementLabel\n  } = renderItem(item, index);\n  const id = getItemId(item, index);\n  const children = getItemChildren(item, index) || [];\n  const isExpandable = children.length > 0;\n  const isExpanded = isExpandable && expandedItems.includes(id);\n  const nextLevel = level + 1;\n  let customIcon = undefined;\n  if (isExpandable && renderItemToggleIcon) {\n    customIcon = renderItemToggleIcon({\n      expanded: isExpanded\n    });\n  }\n  const itemLabelToAnnounce = announcementLabel ? announcementLabel : typeof content === 'string' ? content : '';\n  //  Role `treeitem` isn't used in the initial release per discussion with A11Y team. It requires focus management to be implemented so they will be added as a follow up together.\n  return React.createElement(\"li\", {\n    id: id,\n    className: clsx(styles.treeitem, testUtilStyles.treeitem, isExpandable && [testUtilStyles.expandable], isExpanded && [testUtilStyles.expanded]),\n    \"aria-expanded\": isExpandable ? isExpanded : undefined,\n    \"aria-level\": level,\n    \"data-testid\": `awsui-treeitem-${id}`\n  }, React.createElement(\"div\", {\n    className: styles['expand-toggle-wrapper']\n  }, isExpandable && React.createElement(\"div\", {\n    className: styles.toggle\n  }, React.createElement(ExpandToggleButton, {\n    isExpanded: isExpanded,\n    customIcon: customIcon,\n    expandButtonLabel: joinStrings(i18n('i18nStrings.expandButtonLabel', (_a = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.expandButtonLabel) === null || _a === void 0 ? void 0 : _a.call(i18nStrings, item)), itemLabelToAnnounce),\n    collapseButtonLabel: joinStrings(i18n('i18nStrings.collapseButtonLabel', (_b = i18nStrings === null || i18nStrings === void 0 ? void 0 : i18nStrings.collapseButtonLabel) === null || _b === void 0 ? void 0 : _b.call(i18nStrings, item)), itemLabelToAnnounce),\n    onExpandableItemToggle: () => onItemToggle({\n      id,\n      item,\n      expanded: !isExpanded\n    })\n  }))), React.createElement(\"div\", {\n    className: styles['structured-item-wrapper']\n  }, React.createElement(InternalStructuredItem, {\n    icon: icon,\n    content: content,\n    secondaryContent: secondaryContent,\n    actions: actions,\n    wrapActions: false\n  })), isExpanded && children.length && React.createElement(\"ul\", {\n    className: styles['treeitem-group']\n  }, children.map((child, index) => {\n    return React.createElement(InternalTreeItem, {\n      item: child,\n      index: index,\n      key: `${nextLevel}-${index}`,\n      level: nextLevel,\n      expandedItems: expandedItems,\n      i18nStrings: i18nStrings,\n      onItemToggle: onItemToggle,\n      renderItem: renderItem,\n      getItemId: getItemId,\n      getItemChildren: getItemChildren,\n      renderItemToggleIcon: renderItemToggleIcon\n    });\n  })));\n};\nexport default InternalTreeItem;","map":{"version":3,"names":["React","clsx","useInternalI18n","ExpandToggleButton","InternalStructuredItem","joinStrings","testUtilStyles","styles","InternalTreeItem","_ref","item","index","level","i18nStrings","expandedItems","renderItemToggleIcon","renderItem","getItemId","getItemChildren","onItemToggle","i18n","icon","content","secondaryContent","actions","announcementLabel","id","children","isExpandable","length","isExpanded","includes","nextLevel","customIcon","undefined","expanded","itemLabelToAnnounce","createElement","className","treeitem","expandable","toggle","expandButtonLabel","_a","call","collapseButtonLabel","_b","onExpandableItemToggle","wrapActions","map","child","key"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/src/tree-view/tree-item/index.tsx"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport React from 'react';\nimport clsx from 'clsx';\n\nimport { useInternalI18n } from '../../i18n/context';\nimport { ExpandToggleButton } from '../../internal/components/expand-toggle-button';\nimport InternalStructuredItem from '../../internal/components/structured-item';\nimport { joinStrings } from '../../internal/utils/strings';\nimport { TreeViewProps } from '../interfaces';\n\nimport testUtilStyles from '../test-classes/styles.css.js';\nimport styles from './styles.css.js';\n\ninterface InternalTreeItemProps<T>\n  extends Pick<\n    TreeViewProps,\n    'expandedItems' | 'renderItem' | 'getItemId' | 'getItemChildren' | 'renderItemToggleIcon' | 'i18nStrings'\n  > {\n  item: T;\n  index: number;\n  level: number;\n  onItemToggle: (detail: TreeViewProps.ItemToggleDetail<T>) => void;\n}\n\nconst InternalTreeItem = <T,>({\n  item,\n  index,\n  level,\n  i18nStrings,\n  expandedItems = [],\n  renderItemToggleIcon,\n  renderItem,\n  getItemId,\n  getItemChildren,\n  onItemToggle,\n}: InternalTreeItemProps<T>) => {\n  const i18n = useInternalI18n('tree-view');\n\n  const { icon, content, secondaryContent, actions, announcementLabel } = renderItem(item, index);\n  const id = getItemId(item, index);\n  const children = getItemChildren(item, index) || [];\n  const isExpandable = children.length > 0;\n  const isExpanded = isExpandable && expandedItems.includes(id);\n  const nextLevel = level + 1;\n\n  let customIcon: React.ReactNode | undefined = undefined;\n  if (isExpandable && renderItemToggleIcon) {\n    customIcon = renderItemToggleIcon({ expanded: isExpanded });\n  }\n\n  const itemLabelToAnnounce = announcementLabel\n    ? announcementLabel\n    : typeof content === 'string'\n      ? (content as string)\n      : '';\n\n  //  Role `treeitem` isn't used in the initial release per discussion with A11Y team. It requires focus management to be implemented so they will be added as a follow up together.\n  return (\n    <li\n      id={id}\n      className={clsx(\n        styles.treeitem,\n        testUtilStyles.treeitem,\n        isExpandable && [testUtilStyles.expandable],\n        isExpanded && [testUtilStyles.expanded]\n      )}\n      aria-expanded={isExpandable ? isExpanded : undefined}\n      aria-level={level}\n      data-testid={`awsui-treeitem-${id}`}\n    >\n      <div className={styles['expand-toggle-wrapper']}>\n        {isExpandable && (\n          <div className={styles.toggle}>\n            <ExpandToggleButton\n              isExpanded={isExpanded}\n              customIcon={customIcon}\n              expandButtonLabel={joinStrings(\n                i18n('i18nStrings.expandButtonLabel', i18nStrings?.expandButtonLabel?.(item)),\n                itemLabelToAnnounce\n              )}\n              collapseButtonLabel={joinStrings(\n                i18n('i18nStrings.collapseButtonLabel', i18nStrings?.collapseButtonLabel?.(item)),\n                itemLabelToAnnounce\n              )}\n              onExpandableItemToggle={() => onItemToggle({ id, item, expanded: !isExpanded })}\n            />\n          </div>\n        )}\n      </div>\n\n      <div className={styles['structured-item-wrapper']}>\n        <InternalStructuredItem\n          icon={icon}\n          content={content}\n          secondaryContent={secondaryContent}\n          actions={actions}\n          wrapActions={false}\n        />\n      </div>\n\n      {isExpanded && children.length && (\n        <ul className={styles['treeitem-group']}>\n          {children.map((child, index) => {\n            return (\n              <InternalTreeItem\n                item={child}\n                index={index}\n                key={`${nextLevel}-${index}`}\n                level={nextLevel}\n                expandedItems={expandedItems}\n                i18nStrings={i18nStrings}\n                onItemToggle={onItemToggle}\n                renderItem={renderItem}\n                getItemId={getItemId}\n                getItemChildren={getItemChildren}\n                renderItemToggleIcon={renderItemToggleIcon}\n              />\n            );\n          })}\n        </ul>\n      )}\n    </li>\n  );\n};\n\nexport default InternalTreeItem;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}