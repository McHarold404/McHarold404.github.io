{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CLogClient, PanoramaClient } from './log-clients';\nimport { buildComponentMetricDetail, buildMetricDetail, getMajorVersion } from './formatters';\nconst oneTimeMetrics = new Set();\nexport class Metrics {\n  constructor() {\n    this.clog = new CLogClient();\n    this.panorama = new PanoramaClient();\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    if (args.length === 1) {\n      this.context = args[0];\n    } else {\n      const [packageSource, packageVersion] = args;\n      this.context = {\n        packageSource,\n        packageVersion,\n        theme: 'unknown'\n      };\n    }\n  }\n  sendComponentMetric(metric) {\n    this.sendMetricOnce(`awsui_${metric.componentName}_${this.context.theme.charAt(0)}${getMajorVersion(this.context.packageVersion)}`, 1, buildComponentMetricDetail(metric, this.context));\n  }\n  /*\n   * Calls Console Platform's client logging only the first time the provided metricName is used.\n   * Subsequent calls with the same metricName are ignored.\n   */\n  sendMetricOnce(metricName, value, detail) {\n    const key = [metricName + value + detail].join('|');\n    if (!oneTimeMetrics.has(key)) {\n      this.clog.sendMetric(metricName, value, detail);\n      oneTimeMetrics.add(key);\n    }\n  }\n  /**\n   * Calls Console Platform's client v2 logging JS API with provided metric name and detail.\n   * Does nothing if Console Platform client logging JS is not present in page.\n   */\n  sendPanoramaMetric(metric) {\n    this.panorama.sendMetric(metric);\n  }\n  sendOpsMetricObject(metricName, detail) {\n    this.sendMetricOnce(metricName, 1, buildMetricDetail(detail, this.context));\n  }\n  sendOpsMetricValue(metricName, value) {\n    this.sendMetricOnce(metricName, value);\n  }\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was loaded. The component load event will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentsLoaded() {\n    this.sendComponentMetric({\n      componentName: this.context.packageSource,\n      action: 'loaded'\n    });\n  }\n  /*\n   * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n   * component was used in the page.  A component will only be reported as used to client logging\n   * service once per page view.\n   */\n  logComponentUsed(componentName, configuration) {\n    this.sendComponentMetric({\n      action: 'used',\n      componentName,\n      configuration\n    });\n  }\n}\nexport function clearOneTimeMetricsCache() {\n  oneTimeMetrics.clear();\n}","map":{"version":3,"names":["CLogClient","PanoramaClient","buildComponentMetricDetail","buildMetricDetail","getMajorVersion","oneTimeMetrics","Set","Metrics","constructor","clog","panorama","_len","arguments","length","args","Array","_key","context","packageSource","packageVersion","theme","sendComponentMetric","metric","sendMetricOnce","componentName","charAt","metricName","value","detail","key","join","has","sendMetric","add","sendPanoramaMetric","sendOpsMetricObject","sendOpsMetricValue","logComponentsLoaded","action","logComponentUsed","configuration","clearOneTimeMetricsCache","clear"],"sources":["/Users/naman/Desktop/Portfolio/react-portfolio/node_modules/@cloudscape-design/component-toolkit/internal/base-component/metrics/metrics.js"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { CLogClient, PanoramaClient } from './log-clients';\nimport { buildComponentMetricDetail, buildMetricDetail, getMajorVersion } from './formatters';\nconst oneTimeMetrics = new Set();\nexport class Metrics {\n    constructor(...args) {\n        this.clog = new CLogClient();\n        this.panorama = new PanoramaClient();\n        if (args.length === 1) {\n            this.context = args[0];\n        }\n        else {\n            const [packageSource, packageVersion] = args;\n            this.context = { packageSource, packageVersion, theme: 'unknown' };\n        }\n    }\n    sendComponentMetric(metric) {\n        this.sendMetricOnce(`awsui_${metric.componentName}_${this.context.theme.charAt(0)}${getMajorVersion(this.context.packageVersion)}`, 1, buildComponentMetricDetail(metric, this.context));\n    }\n    /*\n     * Calls Console Platform's client logging only the first time the provided metricName is used.\n     * Subsequent calls with the same metricName are ignored.\n     */\n    sendMetricOnce(metricName, value, detail) {\n        const key = [metricName + value + detail].join('|');\n        if (!oneTimeMetrics.has(key)) {\n            this.clog.sendMetric(metricName, value, detail);\n            oneTimeMetrics.add(key);\n        }\n    }\n    /**\n     * Calls Console Platform's client v2 logging JS API with provided metric name and detail.\n     * Does nothing if Console Platform client logging JS is not present in page.\n     */\n    sendPanoramaMetric(metric) {\n        this.panorama.sendMetric(metric);\n    }\n    sendOpsMetricObject(metricName, detail) {\n        this.sendMetricOnce(metricName, 1, buildMetricDetail(detail, this.context));\n    }\n    sendOpsMetricValue(metricName, value) {\n        this.sendMetricOnce(metricName, value);\n    }\n    /*\n     * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n     * component was loaded. The component load event will only be reported as used to client logging\n     * service once per page view.\n     */\n    logComponentsLoaded() {\n        this.sendComponentMetric({ componentName: this.context.packageSource, action: 'loaded' });\n    }\n    /*\n     * Reports a metric value 1 to Console Platform's client logging service to indicate that the\n     * component was used in the page.  A component will only be reported as used to client logging\n     * service once per page view.\n     */\n    logComponentUsed(componentName, configuration) {\n        this.sendComponentMetric({\n            action: 'used',\n            componentName,\n            configuration,\n        });\n    }\n}\nexport function clearOneTimeMetricsCache() {\n    oneTimeMetrics.clear();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}